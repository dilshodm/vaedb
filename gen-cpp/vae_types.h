/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef vae_TYPES_H
#define vae_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





class VaeDbInternalError : public apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeDbInternalError() : message("") {
  }
  VaeDbInternalError(const char *m) : message(m) {
  }

  virtual ~VaeDbInternalError() throw() {}

  std::string message;

  struct __isset {
    __isset() : message(false) {}
    bool message;
  } __isset;

  bool operator == (const VaeDbInternalError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VaeDbInternalError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbInternalError & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbQueryError : public apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeDbQueryError() : message("") {
  }
  VaeDbQueryError(const char *m) : message(m) {
  }
  
  virtual ~VaeDbQueryError() throw() {}

  std::string message;

  struct __isset {
    __isset() : message(false) {}
    bool message;
  } __isset;

  bool operator == (const VaeDbQueryError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VaeDbQueryError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbQueryError & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeSyntaxError : public apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeSyntaxError() : message("") {
  }

  virtual ~VaeSyntaxError() throw() {}

  std::string message;

  struct __isset {
    __isset() : message(false) {}
    bool message;
  } __isset;

  bool operator == (const VaeSyntaxError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VaeSyntaxError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeSyntaxError & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbContext {
 public:

  static const char* ascii_fingerprint; // = "BEAB2D31539CC6DEBF1F0ACAE335AFB3";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xAB,0x2D,0x31,0x53,0x9C,0xC6,0xDE,0xBF,0x1F,0x0A,0xCA,0xE3,0x35,0xAF,0xB3};

  VaeDbContext() : id(0), structure_id(0), type(""), permalink(""), data("") {
  }

  virtual ~VaeDbContext() throw() {}

  int32_t id;
  int32_t structure_id;
  std::string type;
  std::string permalink;
  std::string data;
  std::map<std::string, std::string>  dataMap;

  struct __isset {
    __isset() : id(false), structure_id(false), type(false), permalink(false), data(false), dataMap(false) {}
    bool id;
    bool structure_id;
    bool type;
    bool permalink;
    bool data;
    bool dataMap;
  } __isset;

  bool operator == (const VaeDbContext & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(structure_id == rhs.structure_id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(permalink == rhs.permalink))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(dataMap == rhs.dataMap))
      return false;
    return true;
  }
  bool operator != (const VaeDbContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbContext & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbCreateInfo {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  VaeDbCreateInfo() : structure_id(0), row_id(0) {
  }

  virtual ~VaeDbCreateInfo() throw() {}

  int32_t structure_id;
  int32_t row_id;

  struct __isset {
    __isset() : structure_id(false), row_id(false) {}
    bool structure_id;
    bool row_id;
  } __isset;

  bool operator == (const VaeDbCreateInfo & rhs) const
  {
    if (!(structure_id == rhs.structure_id))
      return false;
    if (!(row_id == rhs.row_id))
      return false;
    return true;
  }
  bool operator != (const VaeDbCreateInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbCreateInfo & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbStructure {
 public:

  static const char* ascii_fingerprint; // = "C4A8A7FE71C2DB9CB73D92862AA4C591";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0xA8,0xA7,0xFE,0x71,0xC2,0xDB,0x9C,0xB7,0x3D,0x92,0x86,0x2A,0xA4,0xC5,0x91};

  VaeDbStructure() : id(0), name(""), type(""), permalink("") {
  }

  virtual ~VaeDbStructure() throw() {}

  int32_t id;
  std::string name;
  std::string type;
  std::string permalink;

  struct __isset {
    __isset() : id(false), name(false), type(false), permalink(false) {}
    bool id;
    bool name;
    bool type;
    bool permalink;
  } __isset;

  bool operator == (const VaeDbStructure & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(permalink == rhs.permalink))
      return false;
    return true;
  }
  bool operator != (const VaeDbStructure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbStructure & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbResponseForContext {
 public:

  static const char* ascii_fingerprint; // = "13CC73A95A000EF77F4B4496C5AF9110";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xCC,0x73,0xA9,0x5A,0x00,0x0E,0xF7,0x7F,0x4B,0x44,0x96,0xC5,0xAF,0x91,0x10};

  VaeDbResponseForContext() : totalItems(0) {
  }

  virtual ~VaeDbResponseForContext() throw() {}

  std::vector<VaeDbContext>  contexts;
  int32_t totalItems;

  struct __isset {
    __isset() : contexts(false), totalItems(false) {}
    bool contexts;
    bool totalItems;
  } __isset;

  bool operator == (const VaeDbResponseForContext & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    if (!(totalItems == rhs.totalItems))
      return false;
    return true;
  }
  bool operator != (const VaeDbResponseForContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbResponseForContext & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbResponse {
 public:

  static const char* ascii_fingerprint; // = "B320F1DEA4E350B3E7584683A294D8CA";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x20,0xF1,0xDE,0xA4,0xE3,0x50,0xB3,0xE7,0x58,0x46,0x83,0xA2,0x94,0xD8,0xCA};

  VaeDbResponse() : id(0) {
  }

  virtual ~VaeDbResponse() throw() {}

  int32_t id;
  std::vector<VaeDbResponseForContext>  contexts;

  struct __isset {
    __isset() : id(false), contexts(false) {}
    bool id;
    bool contexts;
  } __isset;

  bool operator == (const VaeDbResponse & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbResponse & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbCreateInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "2F9B604E54610FE2F0CD6865A57000F9";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x9B,0x60,0x4E,0x54,0x61,0x0F,0xE2,0xF0,0xCD,0x68,0x65,0xA5,0x70,0x00,0xF9};

  VaeDbCreateInfoResponse() {
  }

  virtual ~VaeDbCreateInfoResponse() throw() {}

  std::vector<VaeDbCreateInfo>  contexts;

  struct __isset {
    __isset() : contexts(false) {}
    bool contexts;
  } __isset;

  bool operator == (const VaeDbCreateInfoResponse & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbCreateInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbCreateInfoResponse & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbDataForContext {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  VaeDbDataForContext() {
  }

  virtual ~VaeDbDataForContext() throw() {}

  std::map<std::string, std::string>  data;

  struct __isset {
    __isset() : data(false) {}
    bool data;
  } __isset;

  bool operator == (const VaeDbDataForContext & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const VaeDbDataForContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbDataForContext & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbDataResponse {
 public:

  static const char* ascii_fingerprint; // = "BE55D8897E850D1BD32BA6AF9C21D55F";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x55,0xD8,0x89,0x7E,0x85,0x0D,0x1B,0xD3,0x2B,0xA6,0xAF,0x9C,0x21,0xD5,0x5F};

  VaeDbDataResponse() {
  }

  virtual ~VaeDbDataResponse() throw() {}

  std::vector<VaeDbDataForContext>  contexts;

  struct __isset {
    __isset() : contexts(false) {}
    bool contexts;
  } __isset;

  bool operator == (const VaeDbDataResponse & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbDataResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbDataResponse & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDbStructureResponse {
 public:

  static const char* ascii_fingerprint; // = "73A02F4BDDF88CFC86E812F6F0C36638";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0xA0,0x2F,0x4B,0xDD,0xF8,0x8C,0xFC,0x86,0xE8,0x12,0xF6,0xF0,0xC3,0x66,0x38};

  VaeDbStructureResponse() {
  }

  virtual ~VaeDbStructureResponse() throw() {}

  std::vector<VaeDbStructure>  contexts;

  struct __isset {
    __isset() : contexts(false) {}
    bool contexts;
  } __isset;

  bool operator == (const VaeDbStructureResponse & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbStructureResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbStructureResponse & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
