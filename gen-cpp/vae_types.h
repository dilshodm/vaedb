/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vae_TYPES_H
#define vae_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class VaeDbInternalError;

class VaeDbQueryError;

class VaeSyntaxError;

class VaeDbContext;

class VaeDbCreateInfo;

class VaeDbStructure;

class VaeDbResponseForContext;

class VaeDbResponse;

class VaeDbCreateInfoResponse;

class VaeDbDataForContext;

class VaeDbDataResponse;

class VaeDbStructureResponse;

typedef struct _VaeDbInternalError__isset {
  _VaeDbInternalError__isset() : message(false) {}
  bool message :1;
} _VaeDbInternalError__isset;

class VaeDbInternalError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeDbInternalError(const VaeDbInternalError&);
  VaeDbInternalError& operator=(const VaeDbInternalError&);
  VaeDbInternalError() : message() {
  }

  virtual ~VaeDbInternalError() throw();
  std::string message;

  _VaeDbInternalError__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const VaeDbInternalError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VaeDbInternalError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbInternalError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbInternalError& obj);
};

void swap(VaeDbInternalError &a, VaeDbInternalError &b);

typedef struct _VaeDbQueryError__isset {
  _VaeDbQueryError__isset() : message(false) {}
  bool message :1;
} _VaeDbQueryError__isset;

class VaeDbQueryError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeDbQueryError(const VaeDbQueryError&);
  VaeDbQueryError& operator=(const VaeDbQueryError&);
  VaeDbQueryError() : message() {
  }

  virtual ~VaeDbQueryError() throw();
  std::string message;

  _VaeDbQueryError__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const VaeDbQueryError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VaeDbQueryError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbQueryError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbQueryError& obj);
};

void swap(VaeDbQueryError &a, VaeDbQueryError &b);

typedef struct _VaeSyntaxError__isset {
  _VaeSyntaxError__isset() : message(false) {}
  bool message :1;
} _VaeSyntaxError__isset;

class VaeSyntaxError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeSyntaxError(const VaeSyntaxError&);
  VaeSyntaxError& operator=(const VaeSyntaxError&);
  VaeSyntaxError() : message() {
  }

  virtual ~VaeSyntaxError() throw();
  std::string message;

  _VaeSyntaxError__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const VaeSyntaxError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const VaeSyntaxError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeSyntaxError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeSyntaxError& obj);
};

void swap(VaeSyntaxError &a, VaeSyntaxError &b);

typedef struct _VaeDbContext__isset {
  _VaeDbContext__isset() : id(false), structure_id(false), type(false), permalink(false), data(false), dataMap(false) {}
  bool id :1;
  bool structure_id :1;
  bool type :1;
  bool permalink :1;
  bool data :1;
  bool dataMap :1;
} _VaeDbContext__isset;

class VaeDbContext {
 public:

  static const char* ascii_fingerprint; // = "BEAB2D31539CC6DEBF1F0ACAE335AFB3";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0xAB,0x2D,0x31,0x53,0x9C,0xC6,0xDE,0xBF,0x1F,0x0A,0xCA,0xE3,0x35,0xAF,0xB3};

  VaeDbContext(const VaeDbContext&);
  VaeDbContext& operator=(const VaeDbContext&);
  VaeDbContext() : id(0), structure_id(0), type(), permalink(), data() {
  }

  virtual ~VaeDbContext() throw();
  int32_t id;
  int32_t structure_id;
  std::string type;
  std::string permalink;
  std::string data;
  std::map<std::string, std::string>  dataMap;

  _VaeDbContext__isset __isset;

  void __set_id(const int32_t val);

  void __set_structure_id(const int32_t val);

  void __set_type(const std::string& val);

  void __set_permalink(const std::string& val);

  void __set_data(const std::string& val);

  void __set_dataMap(const std::map<std::string, std::string> & val);

  bool operator == (const VaeDbContext & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(structure_id == rhs.structure_id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(permalink == rhs.permalink))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(dataMap == rhs.dataMap))
      return false;
    return true;
  }
  bool operator != (const VaeDbContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbContext& obj);
};

void swap(VaeDbContext &a, VaeDbContext &b);

typedef struct _VaeDbCreateInfo__isset {
  _VaeDbCreateInfo__isset() : structure_id(false), row_id(false) {}
  bool structure_id :1;
  bool row_id :1;
} _VaeDbCreateInfo__isset;

class VaeDbCreateInfo {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  VaeDbCreateInfo(const VaeDbCreateInfo&);
  VaeDbCreateInfo& operator=(const VaeDbCreateInfo&);
  VaeDbCreateInfo() : structure_id(0), row_id(0) {
  }

  virtual ~VaeDbCreateInfo() throw();
  int32_t structure_id;
  int32_t row_id;

  _VaeDbCreateInfo__isset __isset;

  void __set_structure_id(const int32_t val);

  void __set_row_id(const int32_t val);

  bool operator == (const VaeDbCreateInfo & rhs) const
  {
    if (!(structure_id == rhs.structure_id))
      return false;
    if (!(row_id == rhs.row_id))
      return false;
    return true;
  }
  bool operator != (const VaeDbCreateInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbCreateInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbCreateInfo& obj);
};

void swap(VaeDbCreateInfo &a, VaeDbCreateInfo &b);

typedef struct _VaeDbStructure__isset {
  _VaeDbStructure__isset() : id(false), name(false), type(false), permalink(false) {}
  bool id :1;
  bool name :1;
  bool type :1;
  bool permalink :1;
} _VaeDbStructure__isset;

class VaeDbStructure {
 public:

  static const char* ascii_fingerprint; // = "C4A8A7FE71C2DB9CB73D92862AA4C591";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0xA8,0xA7,0xFE,0x71,0xC2,0xDB,0x9C,0xB7,0x3D,0x92,0x86,0x2A,0xA4,0xC5,0x91};

  VaeDbStructure(const VaeDbStructure&);
  VaeDbStructure& operator=(const VaeDbStructure&);
  VaeDbStructure() : id(0), name(), type(), permalink() {
  }

  virtual ~VaeDbStructure() throw();
  int32_t id;
  std::string name;
  std::string type;
  std::string permalink;

  _VaeDbStructure__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  void __set_permalink(const std::string& val);

  bool operator == (const VaeDbStructure & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(permalink == rhs.permalink))
      return false;
    return true;
  }
  bool operator != (const VaeDbStructure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbStructure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbStructure& obj);
};

void swap(VaeDbStructure &a, VaeDbStructure &b);

typedef struct _VaeDbResponseForContext__isset {
  _VaeDbResponseForContext__isset() : contexts(false), totalItems(false) {}
  bool contexts :1;
  bool totalItems :1;
} _VaeDbResponseForContext__isset;

class VaeDbResponseForContext {
 public:

  static const char* ascii_fingerprint; // = "13CC73A95A000EF77F4B4496C5AF9110";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xCC,0x73,0xA9,0x5A,0x00,0x0E,0xF7,0x7F,0x4B,0x44,0x96,0xC5,0xAF,0x91,0x10};

  VaeDbResponseForContext(const VaeDbResponseForContext&);
  VaeDbResponseForContext& operator=(const VaeDbResponseForContext&);
  VaeDbResponseForContext() : totalItems(0) {
  }

  virtual ~VaeDbResponseForContext() throw();
  std::vector<VaeDbContext>  contexts;
  int32_t totalItems;

  _VaeDbResponseForContext__isset __isset;

  void __set_contexts(const std::vector<VaeDbContext> & val);

  void __set_totalItems(const int32_t val);

  bool operator == (const VaeDbResponseForContext & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    if (!(totalItems == rhs.totalItems))
      return false;
    return true;
  }
  bool operator != (const VaeDbResponseForContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbResponseForContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbResponseForContext& obj);
};

void swap(VaeDbResponseForContext &a, VaeDbResponseForContext &b);

typedef struct _VaeDbResponse__isset {
  _VaeDbResponse__isset() : id(false), contexts(false) {}
  bool id :1;
  bool contexts :1;
} _VaeDbResponse__isset;

class VaeDbResponse {
 public:

  static const char* ascii_fingerprint; // = "B320F1DEA4E350B3E7584683A294D8CA";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x20,0xF1,0xDE,0xA4,0xE3,0x50,0xB3,0xE7,0x58,0x46,0x83,0xA2,0x94,0xD8,0xCA};

  VaeDbResponse(const VaeDbResponse&);
  VaeDbResponse& operator=(const VaeDbResponse&);
  VaeDbResponse() : id(0) {
  }

  virtual ~VaeDbResponse() throw();
  int32_t id;
  std::vector<VaeDbResponseForContext>  contexts;

  _VaeDbResponse__isset __isset;

  void __set_id(const int32_t val);

  void __set_contexts(const std::vector<VaeDbResponseForContext> & val);

  bool operator == (const VaeDbResponse & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbResponse& obj);
};

void swap(VaeDbResponse &a, VaeDbResponse &b);

typedef struct _VaeDbCreateInfoResponse__isset {
  _VaeDbCreateInfoResponse__isset() : contexts(false) {}
  bool contexts :1;
} _VaeDbCreateInfoResponse__isset;

class VaeDbCreateInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "2F9B604E54610FE2F0CD6865A57000F9";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x9B,0x60,0x4E,0x54,0x61,0x0F,0xE2,0xF0,0xCD,0x68,0x65,0xA5,0x70,0x00,0xF9};

  VaeDbCreateInfoResponse(const VaeDbCreateInfoResponse&);
  VaeDbCreateInfoResponse& operator=(const VaeDbCreateInfoResponse&);
  VaeDbCreateInfoResponse() {
  }

  virtual ~VaeDbCreateInfoResponse() throw();
  std::vector<VaeDbCreateInfo>  contexts;

  _VaeDbCreateInfoResponse__isset __isset;

  void __set_contexts(const std::vector<VaeDbCreateInfo> & val);

  bool operator == (const VaeDbCreateInfoResponse & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbCreateInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbCreateInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbCreateInfoResponse& obj);
};

void swap(VaeDbCreateInfoResponse &a, VaeDbCreateInfoResponse &b);

typedef struct _VaeDbDataForContext__isset {
  _VaeDbDataForContext__isset() : data(false) {}
  bool data :1;
} _VaeDbDataForContext__isset;

class VaeDbDataForContext {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  VaeDbDataForContext(const VaeDbDataForContext&);
  VaeDbDataForContext& operator=(const VaeDbDataForContext&);
  VaeDbDataForContext() {
  }

  virtual ~VaeDbDataForContext() throw();
  std::map<std::string, std::string>  data;

  _VaeDbDataForContext__isset __isset;

  void __set_data(const std::map<std::string, std::string> & val);

  bool operator == (const VaeDbDataForContext & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const VaeDbDataForContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbDataForContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbDataForContext& obj);
};

void swap(VaeDbDataForContext &a, VaeDbDataForContext &b);

typedef struct _VaeDbDataResponse__isset {
  _VaeDbDataResponse__isset() : contexts(false) {}
  bool contexts :1;
} _VaeDbDataResponse__isset;

class VaeDbDataResponse {
 public:

  static const char* ascii_fingerprint; // = "BE55D8897E850D1BD32BA6AF9C21D55F";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x55,0xD8,0x89,0x7E,0x85,0x0D,0x1B,0xD3,0x2B,0xA6,0xAF,0x9C,0x21,0xD5,0x5F};

  VaeDbDataResponse(const VaeDbDataResponse&);
  VaeDbDataResponse& operator=(const VaeDbDataResponse&);
  VaeDbDataResponse() {
  }

  virtual ~VaeDbDataResponse() throw();
  std::vector<VaeDbDataForContext>  contexts;

  _VaeDbDataResponse__isset __isset;

  void __set_contexts(const std::vector<VaeDbDataForContext> & val);

  bool operator == (const VaeDbDataResponse & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbDataResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbDataResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbDataResponse& obj);
};

void swap(VaeDbDataResponse &a, VaeDbDataResponse &b);

typedef struct _VaeDbStructureResponse__isset {
  _VaeDbStructureResponse__isset() : contexts(false) {}
  bool contexts :1;
} _VaeDbStructureResponse__isset;

class VaeDbStructureResponse {
 public:

  static const char* ascii_fingerprint; // = "73A02F4BDDF88CFC86E812F6F0C36638";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0xA0,0x2F,0x4B,0xDD,0xF8,0x8C,0xFC,0x86,0xE8,0x12,0xF6,0xF0,0xC3,0x66,0x38};

  VaeDbStructureResponse(const VaeDbStructureResponse&);
  VaeDbStructureResponse& operator=(const VaeDbStructureResponse&);
  VaeDbStructureResponse() {
  }

  virtual ~VaeDbStructureResponse() throw();
  std::vector<VaeDbStructure>  contexts;

  _VaeDbStructureResponse__isset __isset;

  void __set_contexts(const std::vector<VaeDbStructure> & val);

  bool operator == (const VaeDbStructureResponse & rhs) const
  {
    if (!(contexts == rhs.contexts))
      return false;
    return true;
  }
  bool operator != (const VaeDbStructureResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDbStructureResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDbStructureResponse& obj);
};

void swap(VaeDbStructureResponse &a, VaeDbStructureResponse &b);



#endif
