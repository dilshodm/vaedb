/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vae_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




VaeDbInternalError::~VaeDbInternalError() throw() {
}


void VaeDbInternalError::__set_message(const std::string& val) {
  this->message = val;
}

const char* VaeDbInternalError::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t VaeDbInternalError::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t VaeDbInternalError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbInternalError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbInternalError");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbInternalError &a, VaeDbInternalError &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

VaeDbInternalError::VaeDbInternalError(const VaeDbInternalError& other0) : TException() {
  message = other0.message;
  __isset = other0.__isset;
}
VaeDbInternalError& VaeDbInternalError::operator=(const VaeDbInternalError& other1) {
  message = other1.message;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbInternalError& obj) {
  using apache::thrift::to_string;
  out << "VaeDbInternalError(";
  out << "message=" << to_string(obj.message);
  out << ")";
  return out;
}


VaeDbQueryError::~VaeDbQueryError() throw() {
}


void VaeDbQueryError::__set_message(const std::string& val) {
  this->message = val;
}

const char* VaeDbQueryError::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t VaeDbQueryError::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t VaeDbQueryError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbQueryError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbQueryError");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbQueryError &a, VaeDbQueryError &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

VaeDbQueryError::VaeDbQueryError(const VaeDbQueryError& other2) : TException() {
  message = other2.message;
  __isset = other2.__isset;
}
VaeDbQueryError& VaeDbQueryError::operator=(const VaeDbQueryError& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbQueryError& obj) {
  using apache::thrift::to_string;
  out << "VaeDbQueryError(";
  out << "message=" << to_string(obj.message);
  out << ")";
  return out;
}


VaeSyntaxError::~VaeSyntaxError() throw() {
}


void VaeSyntaxError::__set_message(const std::string& val) {
  this->message = val;
}

const char* VaeSyntaxError::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t VaeSyntaxError::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t VaeSyntaxError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeSyntaxError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeSyntaxError");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeSyntaxError &a, VaeSyntaxError &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

VaeSyntaxError::VaeSyntaxError(const VaeSyntaxError& other4) : TException() {
  message = other4.message;
  __isset = other4.__isset;
}
VaeSyntaxError& VaeSyntaxError::operator=(const VaeSyntaxError& other5) {
  message = other5.message;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeSyntaxError& obj) {
  using apache::thrift::to_string;
  out << "VaeSyntaxError(";
  out << "message=" << to_string(obj.message);
  out << ")";
  return out;
}


VaeDbContext::~VaeDbContext() throw() {
}


void VaeDbContext::__set_id(const int32_t val) {
  this->id = val;
}

void VaeDbContext::__set_structure_id(const int32_t val) {
  this->structure_id = val;
}

void VaeDbContext::__set_type(const std::string& val) {
  this->type = val;
}

void VaeDbContext::__set_permalink(const std::string& val) {
  this->permalink = val;
}

void VaeDbContext::__set_data(const std::string& val) {
  this->data = val;
}

void VaeDbContext::__set_dataMap(const std::map<std::string, std::string> & val) {
  this->dataMap = val;
}

const char* VaeDbContext::ascii_fingerprint = "BEAB2D31539CC6DEBF1F0ACAE335AFB3";
const uint8_t VaeDbContext::binary_fingerprint[16] = {0xBE,0xAB,0x2D,0x31,0x53,0x9C,0xC6,0xDE,0xBF,0x1F,0x0A,0xCA,0xE3,0x35,0xAF,0xB3};

uint32_t VaeDbContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->structure_id);
          this->__isset.structure_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->permalink);
          this->__isset.permalink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->dataMap.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _ktype7;
            ::apache::thrift::protocol::TType _vtype8;
            xfer += iprot->readMapBegin(_ktype7, _vtype8, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              std::string _key11;
              xfer += iprot->readString(_key11);
              std::string& _val12 = this->dataMap[_key11];
              xfer += iprot->readString(_val12);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.dataMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbContext");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("structure_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->structure_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("permalink", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->permalink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataMap", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->dataMap.size()));
    std::map<std::string, std::string> ::const_iterator _iter13;
    for (_iter13 = this->dataMap.begin(); _iter13 != this->dataMap.end(); ++_iter13)
    {
      xfer += oprot->writeString(_iter13->first);
      xfer += oprot->writeString(_iter13->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbContext &a, VaeDbContext &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.structure_id, b.structure_id);
  swap(a.type, b.type);
  swap(a.permalink, b.permalink);
  swap(a.data, b.data);
  swap(a.dataMap, b.dataMap);
  swap(a.__isset, b.__isset);
}

VaeDbContext::VaeDbContext(const VaeDbContext& other14) {
  id = other14.id;
  structure_id = other14.structure_id;
  type = other14.type;
  permalink = other14.permalink;
  data = other14.data;
  dataMap = other14.dataMap;
  __isset = other14.__isset;
}
VaeDbContext& VaeDbContext::operator=(const VaeDbContext& other15) {
  id = other15.id;
  structure_id = other15.structure_id;
  type = other15.type;
  permalink = other15.permalink;
  data = other15.data;
  dataMap = other15.dataMap;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbContext& obj) {
  using apache::thrift::to_string;
  out << "VaeDbContext(";
  out << "id=" << to_string(obj.id);
  out << ", " << "structure_id=" << to_string(obj.structure_id);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "permalink=" << to_string(obj.permalink);
  out << ", " << "data=" << to_string(obj.data);
  out << ", " << "dataMap=" << to_string(obj.dataMap);
  out << ")";
  return out;
}


VaeDbCreateInfo::~VaeDbCreateInfo() throw() {
}


void VaeDbCreateInfo::__set_structure_id(const int32_t val) {
  this->structure_id = val;
}

void VaeDbCreateInfo::__set_row_id(const int32_t val) {
  this->row_id = val;
}

const char* VaeDbCreateInfo::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t VaeDbCreateInfo::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t VaeDbCreateInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->structure_id);
          this->__isset.structure_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->row_id);
          this->__isset.row_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbCreateInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbCreateInfo");

  xfer += oprot->writeFieldBegin("structure_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->structure_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->row_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbCreateInfo &a, VaeDbCreateInfo &b) {
  using ::std::swap;
  swap(a.structure_id, b.structure_id);
  swap(a.row_id, b.row_id);
  swap(a.__isset, b.__isset);
}

VaeDbCreateInfo::VaeDbCreateInfo(const VaeDbCreateInfo& other16) {
  structure_id = other16.structure_id;
  row_id = other16.row_id;
  __isset = other16.__isset;
}
VaeDbCreateInfo& VaeDbCreateInfo::operator=(const VaeDbCreateInfo& other17) {
  structure_id = other17.structure_id;
  row_id = other17.row_id;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbCreateInfo& obj) {
  using apache::thrift::to_string;
  out << "VaeDbCreateInfo(";
  out << "structure_id=" << to_string(obj.structure_id);
  out << ", " << "row_id=" << to_string(obj.row_id);
  out << ")";
  return out;
}


VaeDbStructure::~VaeDbStructure() throw() {
}


void VaeDbStructure::__set_id(const int32_t val) {
  this->id = val;
}

void VaeDbStructure::__set_name(const std::string& val) {
  this->name = val;
}

void VaeDbStructure::__set_type(const std::string& val) {
  this->type = val;
}

void VaeDbStructure::__set_permalink(const std::string& val) {
  this->permalink = val;
}

const char* VaeDbStructure::ascii_fingerprint = "C4A8A7FE71C2DB9CB73D92862AA4C591";
const uint8_t VaeDbStructure::binary_fingerprint[16] = {0xC4,0xA8,0xA7,0xFE,0x71,0xC2,0xDB,0x9C,0xB7,0x3D,0x92,0x86,0x2A,0xA4,0xC5,0x91};

uint32_t VaeDbStructure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->permalink);
          this->__isset.permalink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbStructure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbStructure");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("permalink", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->permalink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbStructure &a, VaeDbStructure &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.permalink, b.permalink);
  swap(a.__isset, b.__isset);
}

VaeDbStructure::VaeDbStructure(const VaeDbStructure& other18) {
  id = other18.id;
  name = other18.name;
  type = other18.type;
  permalink = other18.permalink;
  __isset = other18.__isset;
}
VaeDbStructure& VaeDbStructure::operator=(const VaeDbStructure& other19) {
  id = other19.id;
  name = other19.name;
  type = other19.type;
  permalink = other19.permalink;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbStructure& obj) {
  using apache::thrift::to_string;
  out << "VaeDbStructure(";
  out << "id=" << to_string(obj.id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "permalink=" << to_string(obj.permalink);
  out << ")";
  return out;
}


VaeDbResponseForContext::~VaeDbResponseForContext() throw() {
}


void VaeDbResponseForContext::__set_contexts(const std::vector<VaeDbContext> & val) {
  this->contexts = val;
}

void VaeDbResponseForContext::__set_totalItems(const int32_t val) {
  this->totalItems = val;
}

const char* VaeDbResponseForContext::ascii_fingerprint = "13CC73A95A000EF77F4B4496C5AF9110";
const uint8_t VaeDbResponseForContext::binary_fingerprint[16] = {0x13,0xCC,0x73,0xA9,0x5A,0x00,0x0E,0xF7,0x7F,0x4B,0x44,0x96,0xC5,0xAF,0x91,0x10};

uint32_t VaeDbResponseForContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contexts.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->contexts.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->contexts[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalItems);
          this->__isset.totalItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbResponseForContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbResponseForContext");

  xfer += oprot->writeFieldBegin("contexts", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contexts.size()));
    std::vector<VaeDbContext> ::const_iterator _iter25;
    for (_iter25 = this->contexts.begin(); _iter25 != this->contexts.end(); ++_iter25)
    {
      xfer += (*_iter25).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalItems", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalItems);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbResponseForContext &a, VaeDbResponseForContext &b) {
  using ::std::swap;
  swap(a.contexts, b.contexts);
  swap(a.totalItems, b.totalItems);
  swap(a.__isset, b.__isset);
}

VaeDbResponseForContext::VaeDbResponseForContext(const VaeDbResponseForContext& other26) {
  contexts = other26.contexts;
  totalItems = other26.totalItems;
  __isset = other26.__isset;
}
VaeDbResponseForContext& VaeDbResponseForContext::operator=(const VaeDbResponseForContext& other27) {
  contexts = other27.contexts;
  totalItems = other27.totalItems;
  __isset = other27.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbResponseForContext& obj) {
  using apache::thrift::to_string;
  out << "VaeDbResponseForContext(";
  out << "contexts=" << to_string(obj.contexts);
  out << ", " << "totalItems=" << to_string(obj.totalItems);
  out << ")";
  return out;
}


VaeDbResponse::~VaeDbResponse() throw() {
}


void VaeDbResponse::__set_id(const int32_t val) {
  this->id = val;
}

void VaeDbResponse::__set_contexts(const std::vector<VaeDbResponseForContext> & val) {
  this->contexts = val;
}

const char* VaeDbResponse::ascii_fingerprint = "B320F1DEA4E350B3E7584683A294D8CA";
const uint8_t VaeDbResponse::binary_fingerprint[16] = {0xB3,0x20,0xF1,0xDE,0xA4,0xE3,0x50,0xB3,0xE7,0x58,0x46,0x83,0xA2,0x94,0xD8,0xCA};

uint32_t VaeDbResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contexts.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->contexts.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->contexts[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbResponse");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contexts", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contexts.size()));
    std::vector<VaeDbResponseForContext> ::const_iterator _iter33;
    for (_iter33 = this->contexts.begin(); _iter33 != this->contexts.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbResponse &a, VaeDbResponse &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.contexts, b.contexts);
  swap(a.__isset, b.__isset);
}

VaeDbResponse::VaeDbResponse(const VaeDbResponse& other34) {
  id = other34.id;
  contexts = other34.contexts;
  __isset = other34.__isset;
}
VaeDbResponse& VaeDbResponse::operator=(const VaeDbResponse& other35) {
  id = other35.id;
  contexts = other35.contexts;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbResponse& obj) {
  using apache::thrift::to_string;
  out << "VaeDbResponse(";
  out << "id=" << to_string(obj.id);
  out << ", " << "contexts=" << to_string(obj.contexts);
  out << ")";
  return out;
}


VaeDbCreateInfoResponse::~VaeDbCreateInfoResponse() throw() {
}


void VaeDbCreateInfoResponse::__set_contexts(const std::vector<VaeDbCreateInfo> & val) {
  this->contexts = val;
}

const char* VaeDbCreateInfoResponse::ascii_fingerprint = "2F9B604E54610FE2F0CD6865A57000F9";
const uint8_t VaeDbCreateInfoResponse::binary_fingerprint[16] = {0x2F,0x9B,0x60,0x4E,0x54,0x61,0x0F,0xE2,0xF0,0xCD,0x68,0x65,0xA5,0x70,0x00,0xF9};

uint32_t VaeDbCreateInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contexts.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->contexts.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += this->contexts[_i40].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbCreateInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbCreateInfoResponse");

  xfer += oprot->writeFieldBegin("contexts", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contexts.size()));
    std::vector<VaeDbCreateInfo> ::const_iterator _iter41;
    for (_iter41 = this->contexts.begin(); _iter41 != this->contexts.end(); ++_iter41)
    {
      xfer += (*_iter41).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbCreateInfoResponse &a, VaeDbCreateInfoResponse &b) {
  using ::std::swap;
  swap(a.contexts, b.contexts);
  swap(a.__isset, b.__isset);
}

VaeDbCreateInfoResponse::VaeDbCreateInfoResponse(const VaeDbCreateInfoResponse& other42) {
  contexts = other42.contexts;
  __isset = other42.__isset;
}
VaeDbCreateInfoResponse& VaeDbCreateInfoResponse::operator=(const VaeDbCreateInfoResponse& other43) {
  contexts = other43.contexts;
  __isset = other43.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbCreateInfoResponse& obj) {
  using apache::thrift::to_string;
  out << "VaeDbCreateInfoResponse(";
  out << "contexts=" << to_string(obj.contexts);
  out << ")";
  return out;
}


VaeDbDataForContext::~VaeDbDataForContext() throw() {
}


void VaeDbDataForContext::__set_data(const std::map<std::string, std::string> & val) {
  this->data = val;
}

const char* VaeDbDataForContext::ascii_fingerprint = "5EA2D527ECA3BA20C77AFC023EE8C05F";
const uint8_t VaeDbDataForContext::binary_fingerprint[16] = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

uint32_t VaeDbDataForContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->data.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _ktype45;
            ::apache::thrift::protocol::TType _vtype46;
            xfer += iprot->readMapBegin(_ktype45, _vtype46, _size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              std::string _key49;
              xfer += iprot->readString(_key49);
              std::string& _val50 = this->data[_key49];
              xfer += iprot->readString(_val50);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbDataForContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbDataForContext");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->data.size()));
    std::map<std::string, std::string> ::const_iterator _iter51;
    for (_iter51 = this->data.begin(); _iter51 != this->data.end(); ++_iter51)
    {
      xfer += oprot->writeString(_iter51->first);
      xfer += oprot->writeString(_iter51->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbDataForContext &a, VaeDbDataForContext &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

VaeDbDataForContext::VaeDbDataForContext(const VaeDbDataForContext& other52) {
  data = other52.data;
  __isset = other52.__isset;
}
VaeDbDataForContext& VaeDbDataForContext::operator=(const VaeDbDataForContext& other53) {
  data = other53.data;
  __isset = other53.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbDataForContext& obj) {
  using apache::thrift::to_string;
  out << "VaeDbDataForContext(";
  out << "data=" << to_string(obj.data);
  out << ")";
  return out;
}


VaeDbDataResponse::~VaeDbDataResponse() throw() {
}


void VaeDbDataResponse::__set_contexts(const std::vector<VaeDbDataForContext> & val) {
  this->contexts = val;
}

const char* VaeDbDataResponse::ascii_fingerprint = "BE55D8897E850D1BD32BA6AF9C21D55F";
const uint8_t VaeDbDataResponse::binary_fingerprint[16] = {0xBE,0x55,0xD8,0x89,0x7E,0x85,0x0D,0x1B,0xD3,0x2B,0xA6,0xAF,0x9C,0x21,0xD5,0x5F};

uint32_t VaeDbDataResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contexts.clear();
            uint32_t _size54;
            ::apache::thrift::protocol::TType _etype57;
            xfer += iprot->readListBegin(_etype57, _size54);
            this->contexts.resize(_size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              xfer += this->contexts[_i58].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbDataResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbDataResponse");

  xfer += oprot->writeFieldBegin("contexts", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contexts.size()));
    std::vector<VaeDbDataForContext> ::const_iterator _iter59;
    for (_iter59 = this->contexts.begin(); _iter59 != this->contexts.end(); ++_iter59)
    {
      xfer += (*_iter59).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbDataResponse &a, VaeDbDataResponse &b) {
  using ::std::swap;
  swap(a.contexts, b.contexts);
  swap(a.__isset, b.__isset);
}

VaeDbDataResponse::VaeDbDataResponse(const VaeDbDataResponse& other60) {
  contexts = other60.contexts;
  __isset = other60.__isset;
}
VaeDbDataResponse& VaeDbDataResponse::operator=(const VaeDbDataResponse& other61) {
  contexts = other61.contexts;
  __isset = other61.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbDataResponse& obj) {
  using apache::thrift::to_string;
  out << "VaeDbDataResponse(";
  out << "contexts=" << to_string(obj.contexts);
  out << ")";
  return out;
}


VaeDbStructureResponse::~VaeDbStructureResponse() throw() {
}


void VaeDbStructureResponse::__set_contexts(const std::vector<VaeDbStructure> & val) {
  this->contexts = val;
}

const char* VaeDbStructureResponse::ascii_fingerprint = "73A02F4BDDF88CFC86E812F6F0C36638";
const uint8_t VaeDbStructureResponse::binary_fingerprint[16] = {0x73,0xA0,0x2F,0x4B,0xDD,0xF8,0x8C,0xFC,0x86,0xE8,0x12,0xF6,0xF0,0xC3,0x66,0x38};

uint32_t VaeDbStructureResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contexts.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _etype65;
            xfer += iprot->readListBegin(_etype65, _size62);
            this->contexts.resize(_size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              xfer += this->contexts[_i66].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contexts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbStructureResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbStructureResponse");

  xfer += oprot->writeFieldBegin("contexts", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contexts.size()));
    std::vector<VaeDbStructure> ::const_iterator _iter67;
    for (_iter67 = this->contexts.begin(); _iter67 != this->contexts.end(); ++_iter67)
    {
      xfer += (*_iter67).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbStructureResponse &a, VaeDbStructureResponse &b) {
  using ::std::swap;
  swap(a.contexts, b.contexts);
  swap(a.__isset, b.__isset);
}

VaeDbStructureResponse::VaeDbStructureResponse(const VaeDbStructureResponse& other68) {
  contexts = other68.contexts;
  __isset = other68.__isset;
}
VaeDbStructureResponse& VaeDbStructureResponse::operator=(const VaeDbStructureResponse& other69) {
  contexts = other69.contexts;
  __isset = other69.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbStructureResponse& obj) {
  using apache::thrift::to_string;
  out << "VaeDbStructureResponse(";
  out << "contexts=" << to_string(obj.contexts);
  out << ")";
  return out;
}


VaeDbOpenSessionResponse::~VaeDbOpenSessionResponse() throw() {
}


void VaeDbOpenSessionResponse::__set_session_id(const int32_t val) {
  this->session_id = val;
}

void VaeDbOpenSessionResponse::__set_generation(const int32_t val) {
  this->generation = val;
}

const char* VaeDbOpenSessionResponse::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t VaeDbOpenSessionResponse::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t VaeDbOpenSessionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->generation);
          this->__isset.generation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VaeDbOpenSessionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VaeDbOpenSessionResponse");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("generation", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->generation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VaeDbOpenSessionResponse &a, VaeDbOpenSessionResponse &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.generation, b.generation);
  swap(a.__isset, b.__isset);
}

VaeDbOpenSessionResponse::VaeDbOpenSessionResponse(const VaeDbOpenSessionResponse& other70) {
  session_id = other70.session_id;
  generation = other70.generation;
  __isset = other70.__isset;
}
VaeDbOpenSessionResponse& VaeDbOpenSessionResponse::operator=(const VaeDbOpenSessionResponse& other71) {
  session_id = other71.session_id;
  generation = other71.generation;
  __isset = other71.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VaeDbOpenSessionResponse& obj) {
  using apache::thrift::to_string;
  out << "VaeDbOpenSessionResponse(";
  out << "session_id=" << to_string(obj.session_id);
  out << ", " << "generation=" << to_string(obj.generation);
  out << ")";
  return out;
}


