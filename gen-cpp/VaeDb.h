/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef VaeDb_H
#define VaeDb_H

#include <TProcessor.h>
#include "vae_types.h"



class VaeDbIf {
 public:
  virtual ~VaeDbIf() {}
  virtual int8_t ping() = 0;
  virtual void closeSession(const int32_t session_id, const std::string& secret_key) = 0;
  virtual void createInfo(VaeDbCreateInfoResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query) = 0;
  virtual void data(VaeDbDataResponse& _return, const int32_t session_id, const int32_t response_id) = 0;
  virtual void get(VaeDbResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options) = 0;
  virtual int32_t openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id) = 0;
  virtual void resetSite(const std::string& site, const std::string& secret_key) = 0;
  virtual void structure(VaeDbStructureResponse& _return, const int32_t session_id, const int32_t response_id) = 0;
};

class VaeDbNull : virtual public VaeDbIf {
 public:
  virtual ~VaeDbNull() {}
  int8_t ping() {
    int8_t _return = 0;
    return _return;
  }
  void closeSession(const int32_t /* session_id */, const std::string& /* secret_key */) {
    return;
  }
  void createInfo(VaeDbCreateInfoResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */, const std::string& /* query */) {
    return;
  }
  void data(VaeDbDataResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */) {
    return;
  }
  void get(VaeDbResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */, const std::string& /* query */, const std::map<std::string, std::string> & /* options */) {
    return;
  }
  int32_t openSession(const std::string& /* site */, const std::string& /* secret_key */, const bool /* staging_mode */, const int32_t /* suggested_session_id */) {
    int32_t _return = 0;
    return _return;
  }
  void resetSite(const std::string& /* site */, const std::string& /* secret_key */) {
    return;
  }
  void structure(VaeDbStructureResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */) {
    return;
  }
};

class VaeDb_ping_args {
 public:

  VaeDb_ping_args() {
  }

  virtual ~VaeDb_ping_args() throw() {}


  bool operator == (const VaeDb_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_ping_pargs {
 public:


  virtual ~VaeDb_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_ping_result {
 public:

  VaeDb_ping_result() : success(0) {
  }

  virtual ~VaeDb_ping_result() throw() {}

  int8_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const VaeDb_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_ping_presult {
 public:


  virtual ~VaeDb_ping_presult() throw() {}

  int8_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDb_closeSession_args {
 public:

  VaeDb_closeSession_args() : session_id(0), secret_key("") {
  }

  virtual ~VaeDb_closeSession_args() throw() {}

  int32_t session_id;
  std::string secret_key;

  struct __isset {
    __isset() : session_id(false), secret_key(false) {}
    bool session_id;
    bool secret_key;
  } __isset;

  bool operator == (const VaeDb_closeSession_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(secret_key == rhs.secret_key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_closeSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_closeSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_closeSession_pargs {
 public:


  virtual ~VaeDb_closeSession_pargs() throw() {}

  const int32_t* session_id;
  const std::string* secret_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_closeSession_result {
 public:

  VaeDb_closeSession_result() {
  }

  virtual ~VaeDb_closeSession_result() throw() {}

  VaeDbInternalError e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const VaeDb_closeSession_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const VaeDb_closeSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_closeSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_closeSession_presult {
 public:


  virtual ~VaeDb_closeSession_presult() throw() {}

  VaeDbInternalError e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDb_createInfo_args {
 public:

  VaeDb_createInfo_args() : session_id(0), response_id(0), query("") {
  }

  virtual ~VaeDb_createInfo_args() throw() {}

  int32_t session_id;
  int32_t response_id;
  std::string query;

  struct __isset {
    __isset() : session_id(false), response_id(false), query(false) {}
    bool session_id;
    bool response_id;
    bool query;
  } __isset;

  bool operator == (const VaeDb_createInfo_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const VaeDb_createInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_createInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_createInfo_pargs {
 public:


  virtual ~VaeDb_createInfo_pargs() throw() {}

  const int32_t* session_id;
  const int32_t* response_id;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_createInfo_result {
 public:

  VaeDb_createInfo_result() {
  }

  virtual ~VaeDb_createInfo_result() throw() {}

  VaeDbCreateInfoResponse success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  struct __isset {
    __isset() : success(false), ie(false), qe(false) {}
    bool success;
    bool ie;
    bool qe;
  } __isset;

  bool operator == (const VaeDb_createInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    if (!(qe == rhs.qe))
      return false;
    return true;
  }
  bool operator != (const VaeDb_createInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_createInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_createInfo_presult {
 public:


  virtual ~VaeDb_createInfo_presult() throw() {}

  VaeDbCreateInfoResponse* success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  struct __isset {
    __isset() : success(false), ie(false), qe(false) {}
    bool success;
    bool ie;
    bool qe;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDb_data_args {
 public:

  VaeDb_data_args() : session_id(0), response_id(0) {
  }

  virtual ~VaeDb_data_args() throw() {}

  int32_t session_id;
  int32_t response_id;

  struct __isset {
    __isset() : session_id(false), response_id(false) {}
    bool session_id;
    bool response_id;
  } __isset;

  bool operator == (const VaeDb_data_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_data_pargs {
 public:


  virtual ~VaeDb_data_pargs() throw() {}

  const int32_t* session_id;
  const int32_t* response_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_data_result {
 public:

  VaeDb_data_result() {
  }

  virtual ~VaeDb_data_result() throw() {}

  VaeDbDataResponse success;
  VaeDbInternalError ie;

  struct __isset {
    __isset() : success(false), ie(false) {}
    bool success;
    bool ie;
  } __isset;

  bool operator == (const VaeDb_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    return true;
  }
  bool operator != (const VaeDb_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_data_presult {
 public:


  virtual ~VaeDb_data_presult() throw() {}

  VaeDbDataResponse* success;
  VaeDbInternalError ie;

  struct __isset {
    __isset() : success(false), ie(false) {}
    bool success;
    bool ie;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDb_get_args {
 public:

  VaeDb_get_args() : session_id(0), response_id(0), query("") {
  }

  virtual ~VaeDb_get_args() throw() {}

  int32_t session_id;
  int32_t response_id;
  std::string query;
  std::map<std::string, std::string>  options;

  struct __isset {
    __isset() : session_id(false), response_id(false), query(false), options(false) {}
    bool session_id;
    bool response_id;
    bool query;
    bool options;
  } __isset;

  bool operator == (const VaeDb_get_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const VaeDb_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_get_pargs {
 public:


  virtual ~VaeDb_get_pargs() throw() {}

  const int32_t* session_id;
  const int32_t* response_id;
  const std::string* query;
  const std::map<std::string, std::string> * options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_get_result {
 public:

  VaeDb_get_result() {
  }

  virtual ~VaeDb_get_result() throw() {}

  VaeDbResponse success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  struct __isset {
    __isset() : success(false), ie(false), qe(false) {}
    bool success;
    bool ie;
    bool qe;
  } __isset;

  bool operator == (const VaeDb_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    if (!(qe == rhs.qe))
      return false;
    return true;
  }
  bool operator != (const VaeDb_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_get_presult {
 public:


  virtual ~VaeDb_get_presult() throw() {}

  VaeDbResponse* success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  struct __isset {
    __isset() : success(false), ie(false), qe(false) {}
    bool success;
    bool ie;
    bool qe;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDb_openSession_args {
 public:

  VaeDb_openSession_args() : site(""), secret_key(""), staging_mode(0), suggested_session_id(0) {
  }

  virtual ~VaeDb_openSession_args() throw() {}

  std::string site;
  std::string secret_key;
  bool staging_mode;
  int32_t suggested_session_id;

  struct __isset {
    __isset() : site(false), secret_key(false), staging_mode(false), suggested_session_id(false) {}
    bool site;
    bool secret_key;
    bool staging_mode;
    bool suggested_session_id;
  } __isset;

  bool operator == (const VaeDb_openSession_args & rhs) const
  {
    if (!(site == rhs.site))
      return false;
    if (!(secret_key == rhs.secret_key))
      return false;
    if (!(staging_mode == rhs.staging_mode))
      return false;
    if (!(suggested_session_id == rhs.suggested_session_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_openSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_openSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_openSession_pargs {
 public:


  virtual ~VaeDb_openSession_pargs() throw() {}

  const std::string* site;
  const std::string* secret_key;
  const bool* staging_mode;
  const int32_t* suggested_session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_openSession_result {
 public:

  VaeDb_openSession_result() : success(0) {
  }

  virtual ~VaeDb_openSession_result() throw() {}

  int32_t success;
  VaeDbInternalError e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const VaeDb_openSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const VaeDb_openSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_openSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_openSession_presult {
 public:


  virtual ~VaeDb_openSession_presult() throw() {}

  int32_t* success;
  VaeDbInternalError e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDb_resetSite_args {
 public:

  VaeDb_resetSite_args() : site(""), secret_key("") {
  }

  virtual ~VaeDb_resetSite_args() throw() {}

  std::string site;
  std::string secret_key;

  struct __isset {
    __isset() : site(false), secret_key(false) {}
    bool site;
    bool secret_key;
  } __isset;

  bool operator == (const VaeDb_resetSite_args & rhs) const
  {
    if (!(site == rhs.site))
      return false;
    if (!(secret_key == rhs.secret_key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_resetSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_resetSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_resetSite_pargs {
 public:


  virtual ~VaeDb_resetSite_pargs() throw() {}

  const std::string* site;
  const std::string* secret_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_resetSite_result {
 public:

  VaeDb_resetSite_result() {
  }

  virtual ~VaeDb_resetSite_result() throw() {}

  VaeDbInternalError e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  bool operator == (const VaeDb_resetSite_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const VaeDb_resetSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_resetSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_resetSite_presult {
 public:


  virtual ~VaeDb_resetSite_presult() throw() {}

  VaeDbInternalError e;

  struct __isset {
    __isset() : e(false) {}
    bool e;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDb_structure_args {
 public:

  VaeDb_structure_args() : session_id(0), response_id(0) {
  }

  virtual ~VaeDb_structure_args() throw() {}

  int32_t session_id;
  int32_t response_id;

  struct __isset {
    __isset() : session_id(false), response_id(false) {}
    bool session_id;
    bool response_id;
  } __isset;

  bool operator == (const VaeDb_structure_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_structure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_structure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_structure_pargs {
 public:


  virtual ~VaeDb_structure_pargs() throw() {}

  const int32_t* session_id;
  const int32_t* response_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_structure_result {
 public:

  VaeDb_structure_result() {
  }

  virtual ~VaeDb_structure_result() throw() {}

  VaeDbStructureResponse success;
  VaeDbInternalError ie;

  struct __isset {
    __isset() : success(false), ie(false) {}
    bool success;
    bool ie;
  } __isset;

  bool operator == (const VaeDb_structure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    return true;
  }
  bool operator != (const VaeDb_structure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_structure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeDb_structure_presult {
 public:


  virtual ~VaeDb_structure_presult() throw() {}

  VaeDbStructureResponse* success;
  VaeDbInternalError ie;

  struct __isset {
    __isset() : success(false), ie(false) {}
    bool success;
    bool ie;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VaeDbClient : virtual public VaeDbIf {
 public:
  VaeDbClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  VaeDbClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int8_t ping();
  void send_ping();
  int8_t recv_ping();
  void closeSession(const int32_t session_id, const std::string& secret_key);
  void send_closeSession(const int32_t session_id, const std::string& secret_key);
  void recv_closeSession();
  void createInfo(VaeDbCreateInfoResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query);
  void send_createInfo(const int32_t session_id, const int32_t response_id, const std::string& query);
  void recv_createInfo(VaeDbCreateInfoResponse& _return);
  void data(VaeDbDataResponse& _return, const int32_t session_id, const int32_t response_id);
  void send_data(const int32_t session_id, const int32_t response_id);
  void recv_data(VaeDbDataResponse& _return);
  void get(VaeDbResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options);
  void send_get(const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options);
  void recv_get(VaeDbResponse& _return);
  int32_t openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id);
  void send_openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id);
  int32_t recv_openSession();
  void resetSite(const std::string& site, const std::string& secret_key);
  void send_resetSite(const std::string& site, const std::string& secret_key);
  void recv_resetSite();
  void structure(VaeDbStructureResponse& _return, const int32_t session_id, const int32_t response_id);
  void send_structure(const int32_t session_id, const int32_t response_id);
  void recv_structure(VaeDbStructureResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VaeDbProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<VaeDbIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (VaeDbProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_closeSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_createInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_openSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_resetSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_structure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  VaeDbProcessor(boost::shared_ptr<VaeDbIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &VaeDbProcessor::process_ping;
    processMap_["closeSession"] = &VaeDbProcessor::process_closeSession;
    processMap_["createInfo"] = &VaeDbProcessor::process_createInfo;
    processMap_["data"] = &VaeDbProcessor::process_data;
    processMap_["get"] = &VaeDbProcessor::process_get;
    processMap_["openSession"] = &VaeDbProcessor::process_openSession;
    processMap_["resetSite"] = &VaeDbProcessor::process_resetSite;
    processMap_["structure"] = &VaeDbProcessor::process_structure;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~VaeDbProcessor() {}
};

class VaeDbMultiface : virtual public VaeDbIf {
 public:
  VaeDbMultiface(std::vector<boost::shared_ptr<VaeDbIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VaeDbMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VaeDbIf> > ifaces_;
  VaeDbMultiface() {}
  void add(boost::shared_ptr<VaeDbIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int8_t ping() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ping();
      } else {
        ifaces_[i]->ping();
      }
    }
  }

  void closeSession(const int32_t session_id, const std::string& secret_key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->closeSession(session_id, secret_key);
    }
  }

  void createInfo(VaeDbCreateInfoResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->createInfo(_return, session_id, response_id, query);
        return;
      } else {
        ifaces_[i]->createInfo(_return, session_id, response_id, query);
      }
    }
  }

  void data(VaeDbDataResponse& _return, const int32_t session_id, const int32_t response_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->data(_return, session_id, response_id);
        return;
      } else {
        ifaces_[i]->data(_return, session_id, response_id);
      }
    }
  }

  void get(VaeDbResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, session_id, response_id, query, options);
        return;
      } else {
        ifaces_[i]->get(_return, session_id, response_id, query, options);
      }
    }
  }

  int32_t openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->openSession(site, secret_key, staging_mode, suggested_session_id);
      } else {
        ifaces_[i]->openSession(site, secret_key, staging_mode, suggested_session_id);
      }
    }
  }

  void resetSite(const std::string& site, const std::string& secret_key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->resetSite(site, secret_key);
    }
  }

  void structure(VaeDbStructureResponse& _return, const int32_t session_id, const int32_t response_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->structure(_return, session_id, response_id);
        return;
      } else {
        ifaces_[i]->structure(_return, session_id, response_id);
      }
    }
  }

};



#endif
