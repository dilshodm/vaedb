/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VaeDb_H
#define VaeDb_H

#include <thrift/TDispatchProcessor.h>
#include "vae_types.h"



class VaeDbIf {
 public:
  virtual ~VaeDbIf() {}
  virtual int8_t ping() = 0;
  virtual void closeSession(const int32_t session_id, const std::string& secret_key) = 0;
  virtual void createInfo(VaeDbCreateInfoResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query) = 0;
  virtual void data(VaeDbDataResponse& _return, const int32_t session_id, const int32_t response_id) = 0;
  virtual void get(VaeDbResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options) = 0;
  virtual int32_t openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id) = 0;
  virtual void openSession2(VaeDbOpenSessionResponse& _return, const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id) = 0;
  virtual void resetSite(const std::string& site, const std::string& secret_key) = 0;
  virtual void structure(VaeDbStructureResponse& _return, const int32_t session_id, const int32_t response_id) = 0;
  virtual void sessionCacheGet(std::string& _return, const int32_t session_id, const std::string& key) = 0;
  virtual void sessionCacheSet(const int32_t session_id, const std::string& key, const std::string& value) = 0;
  virtual void sessionCacheDelete(const int32_t session_id, const std::string& key) = 0;
  virtual void shortTermCacheGet(std::string& _return, const int32_t session_id, const std::string& key, const int32_t flags) = 0;
  virtual void shortTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t flags, const int32_t expireInterval) = 0;
  virtual void shortTermCacheDelete(const int32_t session_id, const std::string& key) = 0;
  virtual void longTermCacheGet(std::string& _return, const int32_t session_id, const std::string& key, const int32_t renewExpiry, const int32_t useShortTermCache) = 0;
  virtual void longTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t expireInterval, const int32_t isFilename) = 0;
  virtual void longTermCacheDelete(const int32_t session_id, const std::string& key) = 0;
  virtual void longTermCacheEmpty(const int32_t session_id) = 0;
  virtual void longTermCacheSweeperInfo(VaeDbDataForContext& _return, const int32_t session_id) = 0;
  virtual int32_t sitewideLock(const int32_t session_id) = 0;
  virtual int32_t sitewideUnlock(const int32_t session_id) = 0;
};

class VaeDbIfFactory {
 public:
  typedef VaeDbIf Handler;

  virtual ~VaeDbIfFactory() {}

  virtual VaeDbIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VaeDbIf* /* handler */) = 0;
};

class VaeDbIfSingletonFactory : virtual public VaeDbIfFactory {
 public:
  VaeDbIfSingletonFactory(const boost::shared_ptr<VaeDbIf>& iface) : iface_(iface) {}
  virtual ~VaeDbIfSingletonFactory() {}

  virtual VaeDbIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VaeDbIf* /* handler */) {}

 protected:
  boost::shared_ptr<VaeDbIf> iface_;
};

class VaeDbNull : virtual public VaeDbIf {
 public:
  virtual ~VaeDbNull() {}
  int8_t ping() {
    int8_t _return = 0;
    return _return;
  }
  void closeSession(const int32_t /* session_id */, const std::string& /* secret_key */) {
    return;
  }
  void createInfo(VaeDbCreateInfoResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */, const std::string& /* query */) {
    return;
  }
  void data(VaeDbDataResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */) {
    return;
  }
  void get(VaeDbResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */, const std::string& /* query */, const std::map<std::string, std::string> & /* options */) {
    return;
  }
  int32_t openSession(const std::string& /* site */, const std::string& /* secret_key */, const bool /* staging_mode */, const int32_t /* suggested_session_id */) {
    int32_t _return = 0;
    return _return;
  }
  void openSession2(VaeDbOpenSessionResponse& /* _return */, const std::string& /* site */, const std::string& /* secret_key */, const bool /* staging_mode */, const int32_t /* suggested_session_id */) {
    return;
  }
  void resetSite(const std::string& /* site */, const std::string& /* secret_key */) {
    return;
  }
  void structure(VaeDbStructureResponse& /* _return */, const int32_t /* session_id */, const int32_t /* response_id */) {
    return;
  }
  void sessionCacheGet(std::string& /* _return */, const int32_t /* session_id */, const std::string& /* key */) {
    return;
  }
  void sessionCacheSet(const int32_t /* session_id */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void sessionCacheDelete(const int32_t /* session_id */, const std::string& /* key */) {
    return;
  }
  void shortTermCacheGet(std::string& /* _return */, const int32_t /* session_id */, const std::string& /* key */, const int32_t /* flags */) {
    return;
  }
  void shortTermCacheSet(const int32_t /* session_id */, const std::string& /* key */, const std::string& /* value */, const int32_t /* flags */, const int32_t /* expireInterval */) {
    return;
  }
  void shortTermCacheDelete(const int32_t /* session_id */, const std::string& /* key */) {
    return;
  }
  void longTermCacheGet(std::string& /* _return */, const int32_t /* session_id */, const std::string& /* key */, const int32_t /* renewExpiry */, const int32_t /* useShortTermCache */) {
    return;
  }
  void longTermCacheSet(const int32_t /* session_id */, const std::string& /* key */, const std::string& /* value */, const int32_t /* expireInterval */, const int32_t /* isFilename */) {
    return;
  }
  void longTermCacheDelete(const int32_t /* session_id */, const std::string& /* key */) {
    return;
  }
  void longTermCacheEmpty(const int32_t /* session_id */) {
    return;
  }
  void longTermCacheSweeperInfo(VaeDbDataForContext& /* _return */, const int32_t /* session_id */) {
    return;
  }
  int32_t sitewideLock(const int32_t /* session_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t sitewideUnlock(const int32_t /* session_id */) {
    int32_t _return = 0;
    return _return;
  }
};


class VaeDb_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_ping_args(const VaeDb_ping_args&);
  VaeDb_ping_args& operator=(const VaeDb_ping_args&);
  VaeDb_ping_args() {
  }

  virtual ~VaeDb_ping_args() throw();

  bool operator == (const VaeDb_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_ping_args& obj);
};


class VaeDb_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_ping_pargs& obj);
};

typedef struct _VaeDb_ping_result__isset {
  _VaeDb_ping_result__isset() : success(false) {}
  bool success :1;
} _VaeDb_ping_result__isset;

class VaeDb_ping_result {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};

  VaeDb_ping_result(const VaeDb_ping_result&);
  VaeDb_ping_result& operator=(const VaeDb_ping_result&);
  VaeDb_ping_result() : success(0) {
  }

  virtual ~VaeDb_ping_result() throw();
  int8_t success;

  _VaeDb_ping_result__isset __isset;

  void __set_success(const int8_t val);

  bool operator == (const VaeDb_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_ping_result& obj);
};

typedef struct _VaeDb_ping_presult__isset {
  _VaeDb_ping_presult__isset() : success(false) {}
  bool success :1;
} _VaeDb_ping_presult__isset;

class VaeDb_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};


  virtual ~VaeDb_ping_presult() throw();
  int8_t* success;

  _VaeDb_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_ping_presult& obj);
};

typedef struct _VaeDb_closeSession_args__isset {
  _VaeDb_closeSession_args__isset() : session_id(false), secret_key(false) {}
  bool session_id :1;
  bool secret_key :1;
} _VaeDb_closeSession_args__isset;

class VaeDb_closeSession_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  VaeDb_closeSession_args(const VaeDb_closeSession_args&);
  VaeDb_closeSession_args& operator=(const VaeDb_closeSession_args&);
  VaeDb_closeSession_args() : session_id(0), secret_key() {
  }

  virtual ~VaeDb_closeSession_args() throw();
  int32_t session_id;
  std::string secret_key;

  _VaeDb_closeSession_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_secret_key(const std::string& val);

  bool operator == (const VaeDb_closeSession_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(secret_key == rhs.secret_key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_closeSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_closeSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_closeSession_args& obj);
};


class VaeDb_closeSession_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~VaeDb_closeSession_pargs() throw();
  const int32_t* session_id;
  const std::string* secret_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_closeSession_pargs& obj);
};

typedef struct _VaeDb_closeSession_result__isset {
  _VaeDb_closeSession_result__isset() : e(false) {}
  bool e :1;
} _VaeDb_closeSession_result__isset;

class VaeDb_closeSession_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  VaeDb_closeSession_result(const VaeDb_closeSession_result&);
  VaeDb_closeSession_result& operator=(const VaeDb_closeSession_result&);
  VaeDb_closeSession_result() {
  }

  virtual ~VaeDb_closeSession_result() throw();
  VaeDbInternalError e;

  _VaeDb_closeSession_result__isset __isset;

  void __set_e(const VaeDbInternalError& val);

  bool operator == (const VaeDb_closeSession_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const VaeDb_closeSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_closeSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_closeSession_result& obj);
};

typedef struct _VaeDb_closeSession_presult__isset {
  _VaeDb_closeSession_presult__isset() : e(false) {}
  bool e :1;
} _VaeDb_closeSession_presult__isset;

class VaeDb_closeSession_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~VaeDb_closeSession_presult() throw();
  VaeDbInternalError e;

  _VaeDb_closeSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_closeSession_presult& obj);
};

typedef struct _VaeDb_createInfo_args__isset {
  _VaeDb_createInfo_args__isset() : session_id(false), response_id(false), query(false) {}
  bool session_id :1;
  bool response_id :1;
  bool query :1;
} _VaeDb_createInfo_args__isset;

class VaeDb_createInfo_args {
 public:

  static const char* ascii_fingerprint; // = "4086F12A5C2D615560236565C542F3C3";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

  VaeDb_createInfo_args(const VaeDb_createInfo_args&);
  VaeDb_createInfo_args& operator=(const VaeDb_createInfo_args&);
  VaeDb_createInfo_args() : session_id(0), response_id(0), query() {
  }

  virtual ~VaeDb_createInfo_args() throw();
  int32_t session_id;
  int32_t response_id;
  std::string query;

  _VaeDb_createInfo_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_response_id(const int32_t val);

  void __set_query(const std::string& val);

  bool operator == (const VaeDb_createInfo_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const VaeDb_createInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_createInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_createInfo_args& obj);
};


class VaeDb_createInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "4086F12A5C2D615560236565C542F3C3";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};


  virtual ~VaeDb_createInfo_pargs() throw();
  const int32_t* session_id;
  const int32_t* response_id;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_createInfo_pargs& obj);
};

typedef struct _VaeDb_createInfo_result__isset {
  _VaeDb_createInfo_result__isset() : success(false), ie(false), qe(false) {}
  bool success :1;
  bool ie :1;
  bool qe :1;
} _VaeDb_createInfo_result__isset;

class VaeDb_createInfo_result {
 public:

  static const char* ascii_fingerprint; // = "49ACF283EE3B5D416BA8A34A40749AD2";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0xAC,0xF2,0x83,0xEE,0x3B,0x5D,0x41,0x6B,0xA8,0xA3,0x4A,0x40,0x74,0x9A,0xD2};

  VaeDb_createInfo_result(const VaeDb_createInfo_result&);
  VaeDb_createInfo_result& operator=(const VaeDb_createInfo_result&);
  VaeDb_createInfo_result() {
  }

  virtual ~VaeDb_createInfo_result() throw();
  VaeDbCreateInfoResponse success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  _VaeDb_createInfo_result__isset __isset;

  void __set_success(const VaeDbCreateInfoResponse& val);

  void __set_ie(const VaeDbInternalError& val);

  void __set_qe(const VaeDbQueryError& val);

  bool operator == (const VaeDb_createInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    if (!(qe == rhs.qe))
      return false;
    return true;
  }
  bool operator != (const VaeDb_createInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_createInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_createInfo_result& obj);
};

typedef struct _VaeDb_createInfo_presult__isset {
  _VaeDb_createInfo_presult__isset() : success(false), ie(false), qe(false) {}
  bool success :1;
  bool ie :1;
  bool qe :1;
} _VaeDb_createInfo_presult__isset;

class VaeDb_createInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "49ACF283EE3B5D416BA8A34A40749AD2";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0xAC,0xF2,0x83,0xEE,0x3B,0x5D,0x41,0x6B,0xA8,0xA3,0x4A,0x40,0x74,0x9A,0xD2};


  virtual ~VaeDb_createInfo_presult() throw();
  VaeDbCreateInfoResponse* success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  _VaeDb_createInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_createInfo_presult& obj);
};

typedef struct _VaeDb_data_args__isset {
  _VaeDb_data_args__isset() : session_id(false), response_id(false) {}
  bool session_id :1;
  bool response_id :1;
} _VaeDb_data_args__isset;

class VaeDb_data_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  VaeDb_data_args(const VaeDb_data_args&);
  VaeDb_data_args& operator=(const VaeDb_data_args&);
  VaeDb_data_args() : session_id(0), response_id(0) {
  }

  virtual ~VaeDb_data_args() throw();
  int32_t session_id;
  int32_t response_id;

  _VaeDb_data_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_response_id(const int32_t val);

  bool operator == (const VaeDb_data_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_data_args& obj);
};


class VaeDb_data_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~VaeDb_data_pargs() throw();
  const int32_t* session_id;
  const int32_t* response_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_data_pargs& obj);
};

typedef struct _VaeDb_data_result__isset {
  _VaeDb_data_result__isset() : success(false), ie(false) {}
  bool success :1;
  bool ie :1;
} _VaeDb_data_result__isset;

class VaeDb_data_result {
 public:

  static const char* ascii_fingerprint; // = "32AF97EE508393F6486DFDAE3E1224A5";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0xAF,0x97,0xEE,0x50,0x83,0x93,0xF6,0x48,0x6D,0xFD,0xAE,0x3E,0x12,0x24,0xA5};

  VaeDb_data_result(const VaeDb_data_result&);
  VaeDb_data_result& operator=(const VaeDb_data_result&);
  VaeDb_data_result() {
  }

  virtual ~VaeDb_data_result() throw();
  VaeDbDataResponse success;
  VaeDbInternalError ie;

  _VaeDb_data_result__isset __isset;

  void __set_success(const VaeDbDataResponse& val);

  void __set_ie(const VaeDbInternalError& val);

  bool operator == (const VaeDb_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    return true;
  }
  bool operator != (const VaeDb_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_data_result& obj);
};

typedef struct _VaeDb_data_presult__isset {
  _VaeDb_data_presult__isset() : success(false), ie(false) {}
  bool success :1;
  bool ie :1;
} _VaeDb_data_presult__isset;

class VaeDb_data_presult {
 public:

  static const char* ascii_fingerprint; // = "32AF97EE508393F6486DFDAE3E1224A5";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0xAF,0x97,0xEE,0x50,0x83,0x93,0xF6,0x48,0x6D,0xFD,0xAE,0x3E,0x12,0x24,0xA5};


  virtual ~VaeDb_data_presult() throw();
  VaeDbDataResponse* success;
  VaeDbInternalError ie;

  _VaeDb_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_data_presult& obj);
};

typedef struct _VaeDb_get_args__isset {
  _VaeDb_get_args__isset() : session_id(false), response_id(false), query(false), options(false) {}
  bool session_id :1;
  bool response_id :1;
  bool query :1;
  bool options :1;
} _VaeDb_get_args__isset;

class VaeDb_get_args {
 public:

  static const char* ascii_fingerprint; // = "28D98D188197EAF537AC0008E643FEF5";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xD9,0x8D,0x18,0x81,0x97,0xEA,0xF5,0x37,0xAC,0x00,0x08,0xE6,0x43,0xFE,0xF5};

  VaeDb_get_args(const VaeDb_get_args&);
  VaeDb_get_args& operator=(const VaeDb_get_args&);
  VaeDb_get_args() : session_id(0), response_id(0), query() {
  }

  virtual ~VaeDb_get_args() throw();
  int32_t session_id;
  int32_t response_id;
  std::string query;
  std::map<std::string, std::string>  options;

  _VaeDb_get_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_response_id(const int32_t val);

  void __set_query(const std::string& val);

  void __set_options(const std::map<std::string, std::string> & val);

  bool operator == (const VaeDb_get_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const VaeDb_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_get_args& obj);
};


class VaeDb_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "28D98D188197EAF537AC0008E643FEF5";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xD9,0x8D,0x18,0x81,0x97,0xEA,0xF5,0x37,0xAC,0x00,0x08,0xE6,0x43,0xFE,0xF5};


  virtual ~VaeDb_get_pargs() throw();
  const int32_t* session_id;
  const int32_t* response_id;
  const std::string* query;
  const std::map<std::string, std::string> * options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_get_pargs& obj);
};

typedef struct _VaeDb_get_result__isset {
  _VaeDb_get_result__isset() : success(false), ie(false), qe(false) {}
  bool success :1;
  bool ie :1;
  bool qe :1;
} _VaeDb_get_result__isset;

class VaeDb_get_result {
 public:

  static const char* ascii_fingerprint; // = "9BFC86BB22DF2FAD726B07EC7691CAAB";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xFC,0x86,0xBB,0x22,0xDF,0x2F,0xAD,0x72,0x6B,0x07,0xEC,0x76,0x91,0xCA,0xAB};

  VaeDb_get_result(const VaeDb_get_result&);
  VaeDb_get_result& operator=(const VaeDb_get_result&);
  VaeDb_get_result() {
  }

  virtual ~VaeDb_get_result() throw();
  VaeDbResponse success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  _VaeDb_get_result__isset __isset;

  void __set_success(const VaeDbResponse& val);

  void __set_ie(const VaeDbInternalError& val);

  void __set_qe(const VaeDbQueryError& val);

  bool operator == (const VaeDb_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    if (!(qe == rhs.qe))
      return false;
    return true;
  }
  bool operator != (const VaeDb_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_get_result& obj);
};

typedef struct _VaeDb_get_presult__isset {
  _VaeDb_get_presult__isset() : success(false), ie(false), qe(false) {}
  bool success :1;
  bool ie :1;
  bool qe :1;
} _VaeDb_get_presult__isset;

class VaeDb_get_presult {
 public:

  static const char* ascii_fingerprint; // = "9BFC86BB22DF2FAD726B07EC7691CAAB";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xFC,0x86,0xBB,0x22,0xDF,0x2F,0xAD,0x72,0x6B,0x07,0xEC,0x76,0x91,0xCA,0xAB};


  virtual ~VaeDb_get_presult() throw();
  VaeDbResponse* success;
  VaeDbInternalError ie;
  VaeDbQueryError qe;

  _VaeDb_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_get_presult& obj);
};

typedef struct _VaeDb_openSession_args__isset {
  _VaeDb_openSession_args__isset() : site(false), secret_key(false), staging_mode(false), suggested_session_id(false) {}
  bool site :1;
  bool secret_key :1;
  bool staging_mode :1;
  bool suggested_session_id :1;
} _VaeDb_openSession_args__isset;

class VaeDb_openSession_args {
 public:

  static const char* ascii_fingerprint; // = "184D24C9A0B8D4415E234DB649CAE740";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x4D,0x24,0xC9,0xA0,0xB8,0xD4,0x41,0x5E,0x23,0x4D,0xB6,0x49,0xCA,0xE7,0x40};

  VaeDb_openSession_args(const VaeDb_openSession_args&);
  VaeDb_openSession_args& operator=(const VaeDb_openSession_args&);
  VaeDb_openSession_args() : site(), secret_key(), staging_mode(0), suggested_session_id(0) {
  }

  virtual ~VaeDb_openSession_args() throw();
  std::string site;
  std::string secret_key;
  bool staging_mode;
  int32_t suggested_session_id;

  _VaeDb_openSession_args__isset __isset;

  void __set_site(const std::string& val);

  void __set_secret_key(const std::string& val);

  void __set_staging_mode(const bool val);

  void __set_suggested_session_id(const int32_t val);

  bool operator == (const VaeDb_openSession_args & rhs) const
  {
    if (!(site == rhs.site))
      return false;
    if (!(secret_key == rhs.secret_key))
      return false;
    if (!(staging_mode == rhs.staging_mode))
      return false;
    if (!(suggested_session_id == rhs.suggested_session_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_openSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_openSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession_args& obj);
};


class VaeDb_openSession_pargs {
 public:

  static const char* ascii_fingerprint; // = "184D24C9A0B8D4415E234DB649CAE740";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x4D,0x24,0xC9,0xA0,0xB8,0xD4,0x41,0x5E,0x23,0x4D,0xB6,0x49,0xCA,0xE7,0x40};


  virtual ~VaeDb_openSession_pargs() throw();
  const std::string* site;
  const std::string* secret_key;
  const bool* staging_mode;
  const int32_t* suggested_session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession_pargs& obj);
};

typedef struct _VaeDb_openSession_result__isset {
  _VaeDb_openSession_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _VaeDb_openSession_result__isset;

class VaeDb_openSession_result {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};

  VaeDb_openSession_result(const VaeDb_openSession_result&);
  VaeDb_openSession_result& operator=(const VaeDb_openSession_result&);
  VaeDb_openSession_result() : success(0) {
  }

  virtual ~VaeDb_openSession_result() throw();
  int32_t success;
  VaeDbInternalError e;

  _VaeDb_openSession_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const VaeDbInternalError& val);

  bool operator == (const VaeDb_openSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const VaeDb_openSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_openSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession_result& obj);
};

typedef struct _VaeDb_openSession_presult__isset {
  _VaeDb_openSession_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _VaeDb_openSession_presult__isset;

class VaeDb_openSession_presult {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};


  virtual ~VaeDb_openSession_presult() throw();
  int32_t* success;
  VaeDbInternalError e;

  _VaeDb_openSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession_presult& obj);
};

typedef struct _VaeDb_openSession2_args__isset {
  _VaeDb_openSession2_args__isset() : site(false), secret_key(false), staging_mode(false), suggested_session_id(false) {}
  bool site :1;
  bool secret_key :1;
  bool staging_mode :1;
  bool suggested_session_id :1;
} _VaeDb_openSession2_args__isset;

class VaeDb_openSession2_args {
 public:

  static const char* ascii_fingerprint; // = "184D24C9A0B8D4415E234DB649CAE740";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x4D,0x24,0xC9,0xA0,0xB8,0xD4,0x41,0x5E,0x23,0x4D,0xB6,0x49,0xCA,0xE7,0x40};

  VaeDb_openSession2_args(const VaeDb_openSession2_args&);
  VaeDb_openSession2_args& operator=(const VaeDb_openSession2_args&);
  VaeDb_openSession2_args() : site(), secret_key(), staging_mode(0), suggested_session_id(0) {
  }

  virtual ~VaeDb_openSession2_args() throw();
  std::string site;
  std::string secret_key;
  bool staging_mode;
  int32_t suggested_session_id;

  _VaeDb_openSession2_args__isset __isset;

  void __set_site(const std::string& val);

  void __set_secret_key(const std::string& val);

  void __set_staging_mode(const bool val);

  void __set_suggested_session_id(const int32_t val);

  bool operator == (const VaeDb_openSession2_args & rhs) const
  {
    if (!(site == rhs.site))
      return false;
    if (!(secret_key == rhs.secret_key))
      return false;
    if (!(staging_mode == rhs.staging_mode))
      return false;
    if (!(suggested_session_id == rhs.suggested_session_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_openSession2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_openSession2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession2_args& obj);
};


class VaeDb_openSession2_pargs {
 public:

  static const char* ascii_fingerprint; // = "184D24C9A0B8D4415E234DB649CAE740";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x4D,0x24,0xC9,0xA0,0xB8,0xD4,0x41,0x5E,0x23,0x4D,0xB6,0x49,0xCA,0xE7,0x40};


  virtual ~VaeDb_openSession2_pargs() throw();
  const std::string* site;
  const std::string* secret_key;
  const bool* staging_mode;
  const int32_t* suggested_session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession2_pargs& obj);
};

typedef struct _VaeDb_openSession2_result__isset {
  _VaeDb_openSession2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _VaeDb_openSession2_result__isset;

class VaeDb_openSession2_result {
 public:

  static const char* ascii_fingerprint; // = "337127417EB899721247BF1F1656B985";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x71,0x27,0x41,0x7E,0xB8,0x99,0x72,0x12,0x47,0xBF,0x1F,0x16,0x56,0xB9,0x85};

  VaeDb_openSession2_result(const VaeDb_openSession2_result&);
  VaeDb_openSession2_result& operator=(const VaeDb_openSession2_result&);
  VaeDb_openSession2_result() {
  }

  virtual ~VaeDb_openSession2_result() throw();
  VaeDbOpenSessionResponse success;
  VaeDbInternalError e;

  _VaeDb_openSession2_result__isset __isset;

  void __set_success(const VaeDbOpenSessionResponse& val);

  void __set_e(const VaeDbInternalError& val);

  bool operator == (const VaeDb_openSession2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const VaeDb_openSession2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_openSession2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession2_result& obj);
};

typedef struct _VaeDb_openSession2_presult__isset {
  _VaeDb_openSession2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _VaeDb_openSession2_presult__isset;

class VaeDb_openSession2_presult {
 public:

  static const char* ascii_fingerprint; // = "337127417EB899721247BF1F1656B985";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x71,0x27,0x41,0x7E,0xB8,0x99,0x72,0x12,0x47,0xBF,0x1F,0x16,0x56,0xB9,0x85};


  virtual ~VaeDb_openSession2_presult() throw();
  VaeDbOpenSessionResponse* success;
  VaeDbInternalError e;

  _VaeDb_openSession2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_openSession2_presult& obj);
};

typedef struct _VaeDb_resetSite_args__isset {
  _VaeDb_resetSite_args__isset() : site(false), secret_key(false) {}
  bool site :1;
  bool secret_key :1;
} _VaeDb_resetSite_args__isset;

class VaeDb_resetSite_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  VaeDb_resetSite_args(const VaeDb_resetSite_args&);
  VaeDb_resetSite_args& operator=(const VaeDb_resetSite_args&);
  VaeDb_resetSite_args() : site(), secret_key() {
  }

  virtual ~VaeDb_resetSite_args() throw();
  std::string site;
  std::string secret_key;

  _VaeDb_resetSite_args__isset __isset;

  void __set_site(const std::string& val);

  void __set_secret_key(const std::string& val);

  bool operator == (const VaeDb_resetSite_args & rhs) const
  {
    if (!(site == rhs.site))
      return false;
    if (!(secret_key == rhs.secret_key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_resetSite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_resetSite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_resetSite_args& obj);
};


class VaeDb_resetSite_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~VaeDb_resetSite_pargs() throw();
  const std::string* site;
  const std::string* secret_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_resetSite_pargs& obj);
};

typedef struct _VaeDb_resetSite_result__isset {
  _VaeDb_resetSite_result__isset() : e(false) {}
  bool e :1;
} _VaeDb_resetSite_result__isset;

class VaeDb_resetSite_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  VaeDb_resetSite_result(const VaeDb_resetSite_result&);
  VaeDb_resetSite_result& operator=(const VaeDb_resetSite_result&);
  VaeDb_resetSite_result() {
  }

  virtual ~VaeDb_resetSite_result() throw();
  VaeDbInternalError e;

  _VaeDb_resetSite_result__isset __isset;

  void __set_e(const VaeDbInternalError& val);

  bool operator == (const VaeDb_resetSite_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const VaeDb_resetSite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_resetSite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_resetSite_result& obj);
};

typedef struct _VaeDb_resetSite_presult__isset {
  _VaeDb_resetSite_presult__isset() : e(false) {}
  bool e :1;
} _VaeDb_resetSite_presult__isset;

class VaeDb_resetSite_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~VaeDb_resetSite_presult() throw();
  VaeDbInternalError e;

  _VaeDb_resetSite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_resetSite_presult& obj);
};

typedef struct _VaeDb_structure_args__isset {
  _VaeDb_structure_args__isset() : session_id(false), response_id(false) {}
  bool session_id :1;
  bool response_id :1;
} _VaeDb_structure_args__isset;

class VaeDb_structure_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  VaeDb_structure_args(const VaeDb_structure_args&);
  VaeDb_structure_args& operator=(const VaeDb_structure_args&);
  VaeDb_structure_args() : session_id(0), response_id(0) {
  }

  virtual ~VaeDb_structure_args() throw();
  int32_t session_id;
  int32_t response_id;

  _VaeDb_structure_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_response_id(const int32_t val);

  bool operator == (const VaeDb_structure_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(response_id == rhs.response_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_structure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_structure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_structure_args& obj);
};


class VaeDb_structure_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~VaeDb_structure_pargs() throw();
  const int32_t* session_id;
  const int32_t* response_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_structure_pargs& obj);
};

typedef struct _VaeDb_structure_result__isset {
  _VaeDb_structure_result__isset() : success(false), ie(false) {}
  bool success :1;
  bool ie :1;
} _VaeDb_structure_result__isset;

class VaeDb_structure_result {
 public:

  static const char* ascii_fingerprint; // = "F606AEE087A4C8FA678FDEA721777BED";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x06,0xAE,0xE0,0x87,0xA4,0xC8,0xFA,0x67,0x8F,0xDE,0xA7,0x21,0x77,0x7B,0xED};

  VaeDb_structure_result(const VaeDb_structure_result&);
  VaeDb_structure_result& operator=(const VaeDb_structure_result&);
  VaeDb_structure_result() {
  }

  virtual ~VaeDb_structure_result() throw();
  VaeDbStructureResponse success;
  VaeDbInternalError ie;

  _VaeDb_structure_result__isset __isset;

  void __set_success(const VaeDbStructureResponse& val);

  void __set_ie(const VaeDbInternalError& val);

  bool operator == (const VaeDb_structure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ie == rhs.ie))
      return false;
    return true;
  }
  bool operator != (const VaeDb_structure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_structure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_structure_result& obj);
};

typedef struct _VaeDb_structure_presult__isset {
  _VaeDb_structure_presult__isset() : success(false), ie(false) {}
  bool success :1;
  bool ie :1;
} _VaeDb_structure_presult__isset;

class VaeDb_structure_presult {
 public:

  static const char* ascii_fingerprint; // = "F606AEE087A4C8FA678FDEA721777BED";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x06,0xAE,0xE0,0x87,0xA4,0xC8,0xFA,0x67,0x8F,0xDE,0xA7,0x21,0x77,0x7B,0xED};


  virtual ~VaeDb_structure_presult() throw();
  VaeDbStructureResponse* success;
  VaeDbInternalError ie;

  _VaeDb_structure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_structure_presult& obj);
};

typedef struct _VaeDb_sessionCacheGet_args__isset {
  _VaeDb_sessionCacheGet_args__isset() : session_id(false), key(false) {}
  bool session_id :1;
  bool key :1;
} _VaeDb_sessionCacheGet_args__isset;

class VaeDb_sessionCacheGet_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  VaeDb_sessionCacheGet_args(const VaeDb_sessionCacheGet_args&);
  VaeDb_sessionCacheGet_args& operator=(const VaeDb_sessionCacheGet_args&);
  VaeDb_sessionCacheGet_args() : session_id(0), key() {
  }

  virtual ~VaeDb_sessionCacheGet_args() throw();
  int32_t session_id;
  std::string key;

  _VaeDb_sessionCacheGet_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const VaeDb_sessionCacheGet_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sessionCacheGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sessionCacheGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheGet_args& obj);
};


class VaeDb_sessionCacheGet_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~VaeDb_sessionCacheGet_pargs() throw();
  const int32_t* session_id;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheGet_pargs& obj);
};

typedef struct _VaeDb_sessionCacheGet_result__isset {
  _VaeDb_sessionCacheGet_result__isset() : success(false) {}
  bool success :1;
} _VaeDb_sessionCacheGet_result__isset;

class VaeDb_sessionCacheGet_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VaeDb_sessionCacheGet_result(const VaeDb_sessionCacheGet_result&);
  VaeDb_sessionCacheGet_result& operator=(const VaeDb_sessionCacheGet_result&);
  VaeDb_sessionCacheGet_result() : success() {
  }

  virtual ~VaeDb_sessionCacheGet_result() throw();
  std::string success;

  _VaeDb_sessionCacheGet_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VaeDb_sessionCacheGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sessionCacheGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sessionCacheGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheGet_result& obj);
};

typedef struct _VaeDb_sessionCacheGet_presult__isset {
  _VaeDb_sessionCacheGet_presult__isset() : success(false) {}
  bool success :1;
} _VaeDb_sessionCacheGet_presult__isset;

class VaeDb_sessionCacheGet_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VaeDb_sessionCacheGet_presult() throw();
  std::string* success;

  _VaeDb_sessionCacheGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheGet_presult& obj);
};

typedef struct _VaeDb_sessionCacheSet_args__isset {
  _VaeDb_sessionCacheSet_args__isset() : session_id(false), key(false), value(false) {}
  bool session_id :1;
  bool key :1;
  bool value :1;
} _VaeDb_sessionCacheSet_args__isset;

class VaeDb_sessionCacheSet_args {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  VaeDb_sessionCacheSet_args(const VaeDb_sessionCacheSet_args&);
  VaeDb_sessionCacheSet_args& operator=(const VaeDb_sessionCacheSet_args&);
  VaeDb_sessionCacheSet_args() : session_id(0), key(), value() {
  }

  virtual ~VaeDb_sessionCacheSet_args() throw();
  int32_t session_id;
  std::string key;
  std::string value;

  _VaeDb_sessionCacheSet_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const VaeDb_sessionCacheSet_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sessionCacheSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sessionCacheSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheSet_args& obj);
};


class VaeDb_sessionCacheSet_pargs {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};


  virtual ~VaeDb_sessionCacheSet_pargs() throw();
  const int32_t* session_id;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheSet_pargs& obj);
};


class VaeDb_sessionCacheSet_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_sessionCacheSet_result(const VaeDb_sessionCacheSet_result&);
  VaeDb_sessionCacheSet_result& operator=(const VaeDb_sessionCacheSet_result&);
  VaeDb_sessionCacheSet_result() {
  }

  virtual ~VaeDb_sessionCacheSet_result() throw();

  bool operator == (const VaeDb_sessionCacheSet_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_sessionCacheSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sessionCacheSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheSet_result& obj);
};


class VaeDb_sessionCacheSet_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_sessionCacheSet_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheSet_presult& obj);
};

typedef struct _VaeDb_sessionCacheDelete_args__isset {
  _VaeDb_sessionCacheDelete_args__isset() : session_id(false), key(false) {}
  bool session_id :1;
  bool key :1;
} _VaeDb_sessionCacheDelete_args__isset;

class VaeDb_sessionCacheDelete_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  VaeDb_sessionCacheDelete_args(const VaeDb_sessionCacheDelete_args&);
  VaeDb_sessionCacheDelete_args& operator=(const VaeDb_sessionCacheDelete_args&);
  VaeDb_sessionCacheDelete_args() : session_id(0), key() {
  }

  virtual ~VaeDb_sessionCacheDelete_args() throw();
  int32_t session_id;
  std::string key;

  _VaeDb_sessionCacheDelete_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const VaeDb_sessionCacheDelete_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sessionCacheDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sessionCacheDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheDelete_args& obj);
};


class VaeDb_sessionCacheDelete_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~VaeDb_sessionCacheDelete_pargs() throw();
  const int32_t* session_id;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheDelete_pargs& obj);
};


class VaeDb_sessionCacheDelete_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_sessionCacheDelete_result(const VaeDb_sessionCacheDelete_result&);
  VaeDb_sessionCacheDelete_result& operator=(const VaeDb_sessionCacheDelete_result&);
  VaeDb_sessionCacheDelete_result() {
  }

  virtual ~VaeDb_sessionCacheDelete_result() throw();

  bool operator == (const VaeDb_sessionCacheDelete_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_sessionCacheDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sessionCacheDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheDelete_result& obj);
};


class VaeDb_sessionCacheDelete_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_sessionCacheDelete_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sessionCacheDelete_presult& obj);
};

typedef struct _VaeDb_shortTermCacheGet_args__isset {
  _VaeDb_shortTermCacheGet_args__isset() : session_id(false), key(false), flags(false) {}
  bool session_id :1;
  bool key :1;
  bool flags :1;
} _VaeDb_shortTermCacheGet_args__isset;

class VaeDb_shortTermCacheGet_args {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

  VaeDb_shortTermCacheGet_args(const VaeDb_shortTermCacheGet_args&);
  VaeDb_shortTermCacheGet_args& operator=(const VaeDb_shortTermCacheGet_args&);
  VaeDb_shortTermCacheGet_args() : session_id(0), key(), flags(0) {
  }

  virtual ~VaeDb_shortTermCacheGet_args() throw();
  int32_t session_id;
  std::string key;
  int32_t flags;

  _VaeDb_shortTermCacheGet_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  void __set_flags(const int32_t val);

  bool operator == (const VaeDb_shortTermCacheGet_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(flags == rhs.flags))
      return false;
    return true;
  }
  bool operator != (const VaeDb_shortTermCacheGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_shortTermCacheGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheGet_args& obj);
};


class VaeDb_shortTermCacheGet_pargs {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};


  virtual ~VaeDb_shortTermCacheGet_pargs() throw();
  const int32_t* session_id;
  const std::string* key;
  const int32_t* flags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheGet_pargs& obj);
};

typedef struct _VaeDb_shortTermCacheGet_result__isset {
  _VaeDb_shortTermCacheGet_result__isset() : success(false) {}
  bool success :1;
} _VaeDb_shortTermCacheGet_result__isset;

class VaeDb_shortTermCacheGet_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VaeDb_shortTermCacheGet_result(const VaeDb_shortTermCacheGet_result&);
  VaeDb_shortTermCacheGet_result& operator=(const VaeDb_shortTermCacheGet_result&);
  VaeDb_shortTermCacheGet_result() : success() {
  }

  virtual ~VaeDb_shortTermCacheGet_result() throw();
  std::string success;

  _VaeDb_shortTermCacheGet_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VaeDb_shortTermCacheGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_shortTermCacheGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_shortTermCacheGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheGet_result& obj);
};

typedef struct _VaeDb_shortTermCacheGet_presult__isset {
  _VaeDb_shortTermCacheGet_presult__isset() : success(false) {}
  bool success :1;
} _VaeDb_shortTermCacheGet_presult__isset;

class VaeDb_shortTermCacheGet_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VaeDb_shortTermCacheGet_presult() throw();
  std::string* success;

  _VaeDb_shortTermCacheGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheGet_presult& obj);
};

typedef struct _VaeDb_shortTermCacheSet_args__isset {
  _VaeDb_shortTermCacheSet_args__isset() : session_id(false), key(false), value(false), flags(false), expireInterval(false) {}
  bool session_id :1;
  bool key :1;
  bool value :1;
  bool flags :1;
  bool expireInterval :1;
} _VaeDb_shortTermCacheSet_args__isset;

class VaeDb_shortTermCacheSet_args {
 public:

  static const char* ascii_fingerprint; // = "CE957BCE4AA85FCDE5AE4AA17006475D";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x95,0x7B,0xCE,0x4A,0xA8,0x5F,0xCD,0xE5,0xAE,0x4A,0xA1,0x70,0x06,0x47,0x5D};

  VaeDb_shortTermCacheSet_args(const VaeDb_shortTermCacheSet_args&);
  VaeDb_shortTermCacheSet_args& operator=(const VaeDb_shortTermCacheSet_args&);
  VaeDb_shortTermCacheSet_args() : session_id(0), key(), value(), flags(0), expireInterval(0) {
  }

  virtual ~VaeDb_shortTermCacheSet_args() throw();
  int32_t session_id;
  std::string key;
  std::string value;
  int32_t flags;
  int32_t expireInterval;

  _VaeDb_shortTermCacheSet_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_flags(const int32_t val);

  void __set_expireInterval(const int32_t val);

  bool operator == (const VaeDb_shortTermCacheSet_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(expireInterval == rhs.expireInterval))
      return false;
    return true;
  }
  bool operator != (const VaeDb_shortTermCacheSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_shortTermCacheSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheSet_args& obj);
};


class VaeDb_shortTermCacheSet_pargs {
 public:

  static const char* ascii_fingerprint; // = "CE957BCE4AA85FCDE5AE4AA17006475D";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x95,0x7B,0xCE,0x4A,0xA8,0x5F,0xCD,0xE5,0xAE,0x4A,0xA1,0x70,0x06,0x47,0x5D};


  virtual ~VaeDb_shortTermCacheSet_pargs() throw();
  const int32_t* session_id;
  const std::string* key;
  const std::string* value;
  const int32_t* flags;
  const int32_t* expireInterval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheSet_pargs& obj);
};


class VaeDb_shortTermCacheSet_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_shortTermCacheSet_result(const VaeDb_shortTermCacheSet_result&);
  VaeDb_shortTermCacheSet_result& operator=(const VaeDb_shortTermCacheSet_result&);
  VaeDb_shortTermCacheSet_result() {
  }

  virtual ~VaeDb_shortTermCacheSet_result() throw();

  bool operator == (const VaeDb_shortTermCacheSet_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_shortTermCacheSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_shortTermCacheSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheSet_result& obj);
};


class VaeDb_shortTermCacheSet_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_shortTermCacheSet_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheSet_presult& obj);
};

typedef struct _VaeDb_shortTermCacheDelete_args__isset {
  _VaeDb_shortTermCacheDelete_args__isset() : session_id(false), key(false) {}
  bool session_id :1;
  bool key :1;
} _VaeDb_shortTermCacheDelete_args__isset;

class VaeDb_shortTermCacheDelete_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  VaeDb_shortTermCacheDelete_args(const VaeDb_shortTermCacheDelete_args&);
  VaeDb_shortTermCacheDelete_args& operator=(const VaeDb_shortTermCacheDelete_args&);
  VaeDb_shortTermCacheDelete_args() : session_id(0), key() {
  }

  virtual ~VaeDb_shortTermCacheDelete_args() throw();
  int32_t session_id;
  std::string key;

  _VaeDb_shortTermCacheDelete_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const VaeDb_shortTermCacheDelete_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_shortTermCacheDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_shortTermCacheDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheDelete_args& obj);
};


class VaeDb_shortTermCacheDelete_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~VaeDb_shortTermCacheDelete_pargs() throw();
  const int32_t* session_id;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheDelete_pargs& obj);
};


class VaeDb_shortTermCacheDelete_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_shortTermCacheDelete_result(const VaeDb_shortTermCacheDelete_result&);
  VaeDb_shortTermCacheDelete_result& operator=(const VaeDb_shortTermCacheDelete_result&);
  VaeDb_shortTermCacheDelete_result() {
  }

  virtual ~VaeDb_shortTermCacheDelete_result() throw();

  bool operator == (const VaeDb_shortTermCacheDelete_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_shortTermCacheDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_shortTermCacheDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheDelete_result& obj);
};


class VaeDb_shortTermCacheDelete_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_shortTermCacheDelete_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_shortTermCacheDelete_presult& obj);
};

typedef struct _VaeDb_longTermCacheGet_args__isset {
  _VaeDb_longTermCacheGet_args__isset() : session_id(false), key(false), renewExpiry(false), useShortTermCache(false) {}
  bool session_id :1;
  bool key :1;
  bool renewExpiry :1;
  bool useShortTermCache :1;
} _VaeDb_longTermCacheGet_args__isset;

class VaeDb_longTermCacheGet_args {
 public:

  static const char* ascii_fingerprint; // = "AD5E8581BBE4C3CDE5FC5930DA3DD601";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x5E,0x85,0x81,0xBB,0xE4,0xC3,0xCD,0xE5,0xFC,0x59,0x30,0xDA,0x3D,0xD6,0x01};

  VaeDb_longTermCacheGet_args(const VaeDb_longTermCacheGet_args&);
  VaeDb_longTermCacheGet_args& operator=(const VaeDb_longTermCacheGet_args&);
  VaeDb_longTermCacheGet_args() : session_id(0), key(), renewExpiry(0), useShortTermCache(0) {
  }

  virtual ~VaeDb_longTermCacheGet_args() throw();
  int32_t session_id;
  std::string key;
  int32_t renewExpiry;
  int32_t useShortTermCache;

  _VaeDb_longTermCacheGet_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  void __set_renewExpiry(const int32_t val);

  void __set_useShortTermCache(const int32_t val);

  bool operator == (const VaeDb_longTermCacheGet_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(renewExpiry == rhs.renewExpiry))
      return false;
    if (!(useShortTermCache == rhs.useShortTermCache))
      return false;
    return true;
  }
  bool operator != (const VaeDb_longTermCacheGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheGet_args& obj);
};


class VaeDb_longTermCacheGet_pargs {
 public:

  static const char* ascii_fingerprint; // = "AD5E8581BBE4C3CDE5FC5930DA3DD601";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x5E,0x85,0x81,0xBB,0xE4,0xC3,0xCD,0xE5,0xFC,0x59,0x30,0xDA,0x3D,0xD6,0x01};


  virtual ~VaeDb_longTermCacheGet_pargs() throw();
  const int32_t* session_id;
  const std::string* key;
  const int32_t* renewExpiry;
  const int32_t* useShortTermCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheGet_pargs& obj);
};

typedef struct _VaeDb_longTermCacheGet_result__isset {
  _VaeDb_longTermCacheGet_result__isset() : success(false) {}
  bool success :1;
} _VaeDb_longTermCacheGet_result__isset;

class VaeDb_longTermCacheGet_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  VaeDb_longTermCacheGet_result(const VaeDb_longTermCacheGet_result&);
  VaeDb_longTermCacheGet_result& operator=(const VaeDb_longTermCacheGet_result&);
  VaeDb_longTermCacheGet_result() : success() {
  }

  virtual ~VaeDb_longTermCacheGet_result() throw();
  std::string success;

  _VaeDb_longTermCacheGet_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const VaeDb_longTermCacheGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_longTermCacheGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheGet_result& obj);
};

typedef struct _VaeDb_longTermCacheGet_presult__isset {
  _VaeDb_longTermCacheGet_presult__isset() : success(false) {}
  bool success :1;
} _VaeDb_longTermCacheGet_presult__isset;

class VaeDb_longTermCacheGet_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~VaeDb_longTermCacheGet_presult() throw();
  std::string* success;

  _VaeDb_longTermCacheGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheGet_presult& obj);
};

typedef struct _VaeDb_longTermCacheSet_args__isset {
  _VaeDb_longTermCacheSet_args__isset() : session_id(false), key(false), value(false), expireInterval(false), isFilename(false) {}
  bool session_id :1;
  bool key :1;
  bool value :1;
  bool expireInterval :1;
  bool isFilename :1;
} _VaeDb_longTermCacheSet_args__isset;

class VaeDb_longTermCacheSet_args {
 public:

  static const char* ascii_fingerprint; // = "CE957BCE4AA85FCDE5AE4AA17006475D";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x95,0x7B,0xCE,0x4A,0xA8,0x5F,0xCD,0xE5,0xAE,0x4A,0xA1,0x70,0x06,0x47,0x5D};

  VaeDb_longTermCacheSet_args(const VaeDb_longTermCacheSet_args&);
  VaeDb_longTermCacheSet_args& operator=(const VaeDb_longTermCacheSet_args&);
  VaeDb_longTermCacheSet_args() : session_id(0), key(), value(), expireInterval(0), isFilename(0) {
  }

  virtual ~VaeDb_longTermCacheSet_args() throw();
  int32_t session_id;
  std::string key;
  std::string value;
  int32_t expireInterval;
  int32_t isFilename;

  _VaeDb_longTermCacheSet_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_expireInterval(const int32_t val);

  void __set_isFilename(const int32_t val);

  bool operator == (const VaeDb_longTermCacheSet_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(expireInterval == rhs.expireInterval))
      return false;
    if (!(isFilename == rhs.isFilename))
      return false;
    return true;
  }
  bool operator != (const VaeDb_longTermCacheSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSet_args& obj);
};


class VaeDb_longTermCacheSet_pargs {
 public:

  static const char* ascii_fingerprint; // = "CE957BCE4AA85FCDE5AE4AA17006475D";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0x95,0x7B,0xCE,0x4A,0xA8,0x5F,0xCD,0xE5,0xAE,0x4A,0xA1,0x70,0x06,0x47,0x5D};


  virtual ~VaeDb_longTermCacheSet_pargs() throw();
  const int32_t* session_id;
  const std::string* key;
  const std::string* value;
  const int32_t* expireInterval;
  const int32_t* isFilename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSet_pargs& obj);
};


class VaeDb_longTermCacheSet_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_longTermCacheSet_result(const VaeDb_longTermCacheSet_result&);
  VaeDb_longTermCacheSet_result& operator=(const VaeDb_longTermCacheSet_result&);
  VaeDb_longTermCacheSet_result() {
  }

  virtual ~VaeDb_longTermCacheSet_result() throw();

  bool operator == (const VaeDb_longTermCacheSet_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_longTermCacheSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSet_result& obj);
};


class VaeDb_longTermCacheSet_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_longTermCacheSet_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSet_presult& obj);
};

typedef struct _VaeDb_longTermCacheDelete_args__isset {
  _VaeDb_longTermCacheDelete_args__isset() : session_id(false), key(false) {}
  bool session_id :1;
  bool key :1;
} _VaeDb_longTermCacheDelete_args__isset;

class VaeDb_longTermCacheDelete_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  VaeDb_longTermCacheDelete_args(const VaeDb_longTermCacheDelete_args&);
  VaeDb_longTermCacheDelete_args& operator=(const VaeDb_longTermCacheDelete_args&);
  VaeDb_longTermCacheDelete_args() : session_id(0), key() {
  }

  virtual ~VaeDb_longTermCacheDelete_args() throw();
  int32_t session_id;
  std::string key;

  _VaeDb_longTermCacheDelete_args__isset __isset;

  void __set_session_id(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const VaeDb_longTermCacheDelete_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const VaeDb_longTermCacheDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheDelete_args& obj);
};


class VaeDb_longTermCacheDelete_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~VaeDb_longTermCacheDelete_pargs() throw();
  const int32_t* session_id;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheDelete_pargs& obj);
};


class VaeDb_longTermCacheDelete_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_longTermCacheDelete_result(const VaeDb_longTermCacheDelete_result&);
  VaeDb_longTermCacheDelete_result& operator=(const VaeDb_longTermCacheDelete_result&);
  VaeDb_longTermCacheDelete_result() {
  }

  virtual ~VaeDb_longTermCacheDelete_result() throw();

  bool operator == (const VaeDb_longTermCacheDelete_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_longTermCacheDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheDelete_result& obj);
};


class VaeDb_longTermCacheDelete_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_longTermCacheDelete_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheDelete_presult& obj);
};

typedef struct _VaeDb_longTermCacheEmpty_args__isset {
  _VaeDb_longTermCacheEmpty_args__isset() : session_id(false) {}
  bool session_id :1;
} _VaeDb_longTermCacheEmpty_args__isset;

class VaeDb_longTermCacheEmpty_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  VaeDb_longTermCacheEmpty_args(const VaeDb_longTermCacheEmpty_args&);
  VaeDb_longTermCacheEmpty_args& operator=(const VaeDb_longTermCacheEmpty_args&);
  VaeDb_longTermCacheEmpty_args() : session_id(0) {
  }

  virtual ~VaeDb_longTermCacheEmpty_args() throw();
  int32_t session_id;

  _VaeDb_longTermCacheEmpty_args__isset __isset;

  void __set_session_id(const int32_t val);

  bool operator == (const VaeDb_longTermCacheEmpty_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_longTermCacheEmpty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheEmpty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheEmpty_args& obj);
};


class VaeDb_longTermCacheEmpty_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~VaeDb_longTermCacheEmpty_pargs() throw();
  const int32_t* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheEmpty_pargs& obj);
};


class VaeDb_longTermCacheEmpty_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeDb_longTermCacheEmpty_result(const VaeDb_longTermCacheEmpty_result&);
  VaeDb_longTermCacheEmpty_result& operator=(const VaeDb_longTermCacheEmpty_result&);
  VaeDb_longTermCacheEmpty_result() {
  }

  virtual ~VaeDb_longTermCacheEmpty_result() throw();

  bool operator == (const VaeDb_longTermCacheEmpty_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeDb_longTermCacheEmpty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheEmpty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheEmpty_result& obj);
};


class VaeDb_longTermCacheEmpty_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeDb_longTermCacheEmpty_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheEmpty_presult& obj);
};

typedef struct _VaeDb_longTermCacheSweeperInfo_args__isset {
  _VaeDb_longTermCacheSweeperInfo_args__isset() : session_id(false) {}
  bool session_id :1;
} _VaeDb_longTermCacheSweeperInfo_args__isset;

class VaeDb_longTermCacheSweeperInfo_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  VaeDb_longTermCacheSweeperInfo_args(const VaeDb_longTermCacheSweeperInfo_args&);
  VaeDb_longTermCacheSweeperInfo_args& operator=(const VaeDb_longTermCacheSweeperInfo_args&);
  VaeDb_longTermCacheSweeperInfo_args() : session_id(0) {
  }

  virtual ~VaeDb_longTermCacheSweeperInfo_args() throw();
  int32_t session_id;

  _VaeDb_longTermCacheSweeperInfo_args__isset __isset;

  void __set_session_id(const int32_t val);

  bool operator == (const VaeDb_longTermCacheSweeperInfo_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_longTermCacheSweeperInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheSweeperInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSweeperInfo_args& obj);
};


class VaeDb_longTermCacheSweeperInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~VaeDb_longTermCacheSweeperInfo_pargs() throw();
  const int32_t* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSweeperInfo_pargs& obj);
};

typedef struct _VaeDb_longTermCacheSweeperInfo_result__isset {
  _VaeDb_longTermCacheSweeperInfo_result__isset() : success(false) {}
  bool success :1;
} _VaeDb_longTermCacheSweeperInfo_result__isset;

class VaeDb_longTermCacheSweeperInfo_result {
 public:

  static const char* ascii_fingerprint; // = "BC8D8BE539C6665F1FA9E0F57A0D965C";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x8D,0x8B,0xE5,0x39,0xC6,0x66,0x5F,0x1F,0xA9,0xE0,0xF5,0x7A,0x0D,0x96,0x5C};

  VaeDb_longTermCacheSweeperInfo_result(const VaeDb_longTermCacheSweeperInfo_result&);
  VaeDb_longTermCacheSweeperInfo_result& operator=(const VaeDb_longTermCacheSweeperInfo_result&);
  VaeDb_longTermCacheSweeperInfo_result() {
  }

  virtual ~VaeDb_longTermCacheSweeperInfo_result() throw();
  VaeDbDataForContext success;

  _VaeDb_longTermCacheSweeperInfo_result__isset __isset;

  void __set_success(const VaeDbDataForContext& val);

  bool operator == (const VaeDb_longTermCacheSweeperInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_longTermCacheSweeperInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_longTermCacheSweeperInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSweeperInfo_result& obj);
};

typedef struct _VaeDb_longTermCacheSweeperInfo_presult__isset {
  _VaeDb_longTermCacheSweeperInfo_presult__isset() : success(false) {}
  bool success :1;
} _VaeDb_longTermCacheSweeperInfo_presult__isset;

class VaeDb_longTermCacheSweeperInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "BC8D8BE539C6665F1FA9E0F57A0D965C";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x8D,0x8B,0xE5,0x39,0xC6,0x66,0x5F,0x1F,0xA9,0xE0,0xF5,0x7A,0x0D,0x96,0x5C};


  virtual ~VaeDb_longTermCacheSweeperInfo_presult() throw();
  VaeDbDataForContext* success;

  _VaeDb_longTermCacheSweeperInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_longTermCacheSweeperInfo_presult& obj);
};

typedef struct _VaeDb_sitewideLock_args__isset {
  _VaeDb_sitewideLock_args__isset() : session_id(false) {}
  bool session_id :1;
} _VaeDb_sitewideLock_args__isset;

class VaeDb_sitewideLock_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  VaeDb_sitewideLock_args(const VaeDb_sitewideLock_args&);
  VaeDb_sitewideLock_args& operator=(const VaeDb_sitewideLock_args&);
  VaeDb_sitewideLock_args() : session_id(0) {
  }

  virtual ~VaeDb_sitewideLock_args() throw();
  int32_t session_id;

  _VaeDb_sitewideLock_args__isset __isset;

  void __set_session_id(const int32_t val);

  bool operator == (const VaeDb_sitewideLock_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sitewideLock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sitewideLock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideLock_args& obj);
};


class VaeDb_sitewideLock_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~VaeDb_sitewideLock_pargs() throw();
  const int32_t* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideLock_pargs& obj);
};

typedef struct _VaeDb_sitewideLock_result__isset {
  _VaeDb_sitewideLock_result__isset() : success(false) {}
  bool success :1;
} _VaeDb_sitewideLock_result__isset;

class VaeDb_sitewideLock_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  VaeDb_sitewideLock_result(const VaeDb_sitewideLock_result&);
  VaeDb_sitewideLock_result& operator=(const VaeDb_sitewideLock_result&);
  VaeDb_sitewideLock_result() : success(0) {
  }

  virtual ~VaeDb_sitewideLock_result() throw();
  int32_t success;

  _VaeDb_sitewideLock_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const VaeDb_sitewideLock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sitewideLock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sitewideLock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideLock_result& obj);
};

typedef struct _VaeDb_sitewideLock_presult__isset {
  _VaeDb_sitewideLock_presult__isset() : success(false) {}
  bool success :1;
} _VaeDb_sitewideLock_presult__isset;

class VaeDb_sitewideLock_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~VaeDb_sitewideLock_presult() throw();
  int32_t* success;

  _VaeDb_sitewideLock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideLock_presult& obj);
};

typedef struct _VaeDb_sitewideUnlock_args__isset {
  _VaeDb_sitewideUnlock_args__isset() : session_id(false) {}
  bool session_id :1;
} _VaeDb_sitewideUnlock_args__isset;

class VaeDb_sitewideUnlock_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  VaeDb_sitewideUnlock_args(const VaeDb_sitewideUnlock_args&);
  VaeDb_sitewideUnlock_args& operator=(const VaeDb_sitewideUnlock_args&);
  VaeDb_sitewideUnlock_args() : session_id(0) {
  }

  virtual ~VaeDb_sitewideUnlock_args() throw();
  int32_t session_id;

  _VaeDb_sitewideUnlock_args__isset __isset;

  void __set_session_id(const int32_t val);

  bool operator == (const VaeDb_sitewideUnlock_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sitewideUnlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sitewideUnlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideUnlock_args& obj);
};


class VaeDb_sitewideUnlock_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~VaeDb_sitewideUnlock_pargs() throw();
  const int32_t* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideUnlock_pargs& obj);
};

typedef struct _VaeDb_sitewideUnlock_result__isset {
  _VaeDb_sitewideUnlock_result__isset() : success(false) {}
  bool success :1;
} _VaeDb_sitewideUnlock_result__isset;

class VaeDb_sitewideUnlock_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  VaeDb_sitewideUnlock_result(const VaeDb_sitewideUnlock_result&);
  VaeDb_sitewideUnlock_result& operator=(const VaeDb_sitewideUnlock_result&);
  VaeDb_sitewideUnlock_result() : success(0) {
  }

  virtual ~VaeDb_sitewideUnlock_result() throw();
  int32_t success;

  _VaeDb_sitewideUnlock_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const VaeDb_sitewideUnlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeDb_sitewideUnlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeDb_sitewideUnlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideUnlock_result& obj);
};

typedef struct _VaeDb_sitewideUnlock_presult__isset {
  _VaeDb_sitewideUnlock_presult__isset() : success(false) {}
  bool success :1;
} _VaeDb_sitewideUnlock_presult__isset;

class VaeDb_sitewideUnlock_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~VaeDb_sitewideUnlock_presult() throw();
  int32_t* success;

  _VaeDb_sitewideUnlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeDb_sitewideUnlock_presult& obj);
};

class VaeDbClient : virtual public VaeDbIf {
 public:
  VaeDbClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VaeDbClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int8_t ping();
  void send_ping();
  int8_t recv_ping();
  void closeSession(const int32_t session_id, const std::string& secret_key);
  void send_closeSession(const int32_t session_id, const std::string& secret_key);
  void recv_closeSession();
  void createInfo(VaeDbCreateInfoResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query);
  void send_createInfo(const int32_t session_id, const int32_t response_id, const std::string& query);
  void recv_createInfo(VaeDbCreateInfoResponse& _return);
  void data(VaeDbDataResponse& _return, const int32_t session_id, const int32_t response_id);
  void send_data(const int32_t session_id, const int32_t response_id);
  void recv_data(VaeDbDataResponse& _return);
  void get(VaeDbResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options);
  void send_get(const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options);
  void recv_get(VaeDbResponse& _return);
  int32_t openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id);
  void send_openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id);
  int32_t recv_openSession();
  void openSession2(VaeDbOpenSessionResponse& _return, const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id);
  void send_openSession2(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id);
  void recv_openSession2(VaeDbOpenSessionResponse& _return);
  void resetSite(const std::string& site, const std::string& secret_key);
  void send_resetSite(const std::string& site, const std::string& secret_key);
  void recv_resetSite();
  void structure(VaeDbStructureResponse& _return, const int32_t session_id, const int32_t response_id);
  void send_structure(const int32_t session_id, const int32_t response_id);
  void recv_structure(VaeDbStructureResponse& _return);
  void sessionCacheGet(std::string& _return, const int32_t session_id, const std::string& key);
  void send_sessionCacheGet(const int32_t session_id, const std::string& key);
  void recv_sessionCacheGet(std::string& _return);
  void sessionCacheSet(const int32_t session_id, const std::string& key, const std::string& value);
  void send_sessionCacheSet(const int32_t session_id, const std::string& key, const std::string& value);
  void recv_sessionCacheSet();
  void sessionCacheDelete(const int32_t session_id, const std::string& key);
  void send_sessionCacheDelete(const int32_t session_id, const std::string& key);
  void recv_sessionCacheDelete();
  void shortTermCacheGet(std::string& _return, const int32_t session_id, const std::string& key, const int32_t flags);
  void send_shortTermCacheGet(const int32_t session_id, const std::string& key, const int32_t flags);
  void recv_shortTermCacheGet(std::string& _return);
  void shortTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t flags, const int32_t expireInterval);
  void send_shortTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t flags, const int32_t expireInterval);
  void recv_shortTermCacheSet();
  void shortTermCacheDelete(const int32_t session_id, const std::string& key);
  void send_shortTermCacheDelete(const int32_t session_id, const std::string& key);
  void recv_shortTermCacheDelete();
  void longTermCacheGet(std::string& _return, const int32_t session_id, const std::string& key, const int32_t renewExpiry, const int32_t useShortTermCache);
  void send_longTermCacheGet(const int32_t session_id, const std::string& key, const int32_t renewExpiry, const int32_t useShortTermCache);
  void recv_longTermCacheGet(std::string& _return);
  void longTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t expireInterval, const int32_t isFilename);
  void send_longTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t expireInterval, const int32_t isFilename);
  void recv_longTermCacheSet();
  void longTermCacheDelete(const int32_t session_id, const std::string& key);
  void send_longTermCacheDelete(const int32_t session_id, const std::string& key);
  void recv_longTermCacheDelete();
  void longTermCacheEmpty(const int32_t session_id);
  void send_longTermCacheEmpty(const int32_t session_id);
  void recv_longTermCacheEmpty();
  void longTermCacheSweeperInfo(VaeDbDataForContext& _return, const int32_t session_id);
  void send_longTermCacheSweeperInfo(const int32_t session_id);
  void recv_longTermCacheSweeperInfo(VaeDbDataForContext& _return);
  int32_t sitewideLock(const int32_t session_id);
  void send_sitewideLock(const int32_t session_id);
  int32_t recv_sitewideLock();
  int32_t sitewideUnlock(const int32_t session_id);
  void send_sitewideUnlock(const int32_t session_id);
  int32_t recv_sitewideUnlock();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VaeDbProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VaeDbIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VaeDbProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openSession2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resetSite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_structure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sessionCacheGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sessionCacheSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sessionCacheDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortTermCacheGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortTermCacheSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shortTermCacheDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_longTermCacheGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_longTermCacheSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_longTermCacheDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_longTermCacheEmpty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_longTermCacheSweeperInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sitewideLock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sitewideUnlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VaeDbProcessor(boost::shared_ptr<VaeDbIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &VaeDbProcessor::process_ping;
    processMap_["closeSession"] = &VaeDbProcessor::process_closeSession;
    processMap_["createInfo"] = &VaeDbProcessor::process_createInfo;
    processMap_["data"] = &VaeDbProcessor::process_data;
    processMap_["get"] = &VaeDbProcessor::process_get;
    processMap_["openSession"] = &VaeDbProcessor::process_openSession;
    processMap_["openSession2"] = &VaeDbProcessor::process_openSession2;
    processMap_["resetSite"] = &VaeDbProcessor::process_resetSite;
    processMap_["structure"] = &VaeDbProcessor::process_structure;
    processMap_["sessionCacheGet"] = &VaeDbProcessor::process_sessionCacheGet;
    processMap_["sessionCacheSet"] = &VaeDbProcessor::process_sessionCacheSet;
    processMap_["sessionCacheDelete"] = &VaeDbProcessor::process_sessionCacheDelete;
    processMap_["shortTermCacheGet"] = &VaeDbProcessor::process_shortTermCacheGet;
    processMap_["shortTermCacheSet"] = &VaeDbProcessor::process_shortTermCacheSet;
    processMap_["shortTermCacheDelete"] = &VaeDbProcessor::process_shortTermCacheDelete;
    processMap_["longTermCacheGet"] = &VaeDbProcessor::process_longTermCacheGet;
    processMap_["longTermCacheSet"] = &VaeDbProcessor::process_longTermCacheSet;
    processMap_["longTermCacheDelete"] = &VaeDbProcessor::process_longTermCacheDelete;
    processMap_["longTermCacheEmpty"] = &VaeDbProcessor::process_longTermCacheEmpty;
    processMap_["longTermCacheSweeperInfo"] = &VaeDbProcessor::process_longTermCacheSweeperInfo;
    processMap_["sitewideLock"] = &VaeDbProcessor::process_sitewideLock;
    processMap_["sitewideUnlock"] = &VaeDbProcessor::process_sitewideUnlock;
  }

  virtual ~VaeDbProcessor() {}
};

class VaeDbProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VaeDbProcessorFactory(const ::boost::shared_ptr< VaeDbIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VaeDbIfFactory > handlerFactory_;
};

class VaeDbMultiface : virtual public VaeDbIf {
 public:
  VaeDbMultiface(std::vector<boost::shared_ptr<VaeDbIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VaeDbMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VaeDbIf> > ifaces_;
  VaeDbMultiface() {}
  void add(boost::shared_ptr<VaeDbIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int8_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void closeSession(const int32_t session_id, const std::string& secret_key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeSession(session_id, secret_key);
    }
    ifaces_[i]->closeSession(session_id, secret_key);
  }

  void createInfo(VaeDbCreateInfoResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createInfo(_return, session_id, response_id, query);
    }
    ifaces_[i]->createInfo(_return, session_id, response_id, query);
    return;
  }

  void data(VaeDbDataResponse& _return, const int32_t session_id, const int32_t response_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->data(_return, session_id, response_id);
    }
    ifaces_[i]->data(_return, session_id, response_id);
    return;
  }

  void get(VaeDbResponse& _return, const int32_t session_id, const int32_t response_id, const std::string& query, const std::map<std::string, std::string> & options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, session_id, response_id, query, options);
    }
    ifaces_[i]->get(_return, session_id, response_id, query, options);
    return;
  }

  int32_t openSession(const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openSession(site, secret_key, staging_mode, suggested_session_id);
    }
    return ifaces_[i]->openSession(site, secret_key, staging_mode, suggested_session_id);
  }

  void openSession2(VaeDbOpenSessionResponse& _return, const std::string& site, const std::string& secret_key, const bool staging_mode, const int32_t suggested_session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openSession2(_return, site, secret_key, staging_mode, suggested_session_id);
    }
    ifaces_[i]->openSession2(_return, site, secret_key, staging_mode, suggested_session_id);
    return;
  }

  void resetSite(const std::string& site, const std::string& secret_key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resetSite(site, secret_key);
    }
    ifaces_[i]->resetSite(site, secret_key);
  }

  void structure(VaeDbStructureResponse& _return, const int32_t session_id, const int32_t response_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->structure(_return, session_id, response_id);
    }
    ifaces_[i]->structure(_return, session_id, response_id);
    return;
  }

  void sessionCacheGet(std::string& _return, const int32_t session_id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sessionCacheGet(_return, session_id, key);
    }
    ifaces_[i]->sessionCacheGet(_return, session_id, key);
    return;
  }

  void sessionCacheSet(const int32_t session_id, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sessionCacheSet(session_id, key, value);
    }
    ifaces_[i]->sessionCacheSet(session_id, key, value);
  }

  void sessionCacheDelete(const int32_t session_id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sessionCacheDelete(session_id, key);
    }
    ifaces_[i]->sessionCacheDelete(session_id, key);
  }

  void shortTermCacheGet(std::string& _return, const int32_t session_id, const std::string& key, const int32_t flags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortTermCacheGet(_return, session_id, key, flags);
    }
    ifaces_[i]->shortTermCacheGet(_return, session_id, key, flags);
    return;
  }

  void shortTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t flags, const int32_t expireInterval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortTermCacheSet(session_id, key, value, flags, expireInterval);
    }
    ifaces_[i]->shortTermCacheSet(session_id, key, value, flags, expireInterval);
  }

  void shortTermCacheDelete(const int32_t session_id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shortTermCacheDelete(session_id, key);
    }
    ifaces_[i]->shortTermCacheDelete(session_id, key);
  }

  void longTermCacheGet(std::string& _return, const int32_t session_id, const std::string& key, const int32_t renewExpiry, const int32_t useShortTermCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->longTermCacheGet(_return, session_id, key, renewExpiry, useShortTermCache);
    }
    ifaces_[i]->longTermCacheGet(_return, session_id, key, renewExpiry, useShortTermCache);
    return;
  }

  void longTermCacheSet(const int32_t session_id, const std::string& key, const std::string& value, const int32_t expireInterval, const int32_t isFilename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->longTermCacheSet(session_id, key, value, expireInterval, isFilename);
    }
    ifaces_[i]->longTermCacheSet(session_id, key, value, expireInterval, isFilename);
  }

  void longTermCacheDelete(const int32_t session_id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->longTermCacheDelete(session_id, key);
    }
    ifaces_[i]->longTermCacheDelete(session_id, key);
  }

  void longTermCacheEmpty(const int32_t session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->longTermCacheEmpty(session_id);
    }
    ifaces_[i]->longTermCacheEmpty(session_id);
  }

  void longTermCacheSweeperInfo(VaeDbDataForContext& _return, const int32_t session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->longTermCacheSweeperInfo(_return, session_id);
    }
    ifaces_[i]->longTermCacheSweeperInfo(_return, session_id);
    return;
  }

  int32_t sitewideLock(const int32_t session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sitewideLock(session_id);
    }
    return ifaces_[i]->sitewideLock(session_id);
  }

  int32_t sitewideUnlock(const int32_t session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sitewideUnlock(session_id);
    }
    return ifaces_[i]->sitewideUnlock(session_id);
  }

};



#endif
