/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef VaeRubyd_H
#define VaeRubyd_H

#include <TProcessor.h>
#include "vae_types.h"



class VaeRubydIf {
 public:
  virtual ~VaeRubydIf() {}
  virtual int8_t ping() = 0;
  virtual int8_t fixDocRoot(const std::string& path) = 0;
  virtual void haml(std::string& _return, const std::string& text) = 0;
  virtual void sass(std::string& _return, const std::string& text, const std::string& load_path) = 0;
};

class VaeRubydNull : virtual public VaeRubydIf {
 public:
  virtual ~VaeRubydNull() {}
  int8_t ping() {
    int8_t _return = 0;
    return _return;
  }
  int8_t fixDocRoot(const std::string& /* path */) {
    int8_t _return = 0;
    return _return;
  }
  void haml(std::string& /* _return */, const std::string& /* text */) {
    return;
  }
  void sass(std::string& /* _return */, const std::string& /* text */, const std::string& /* load_path */) {
    return;
  }
};

class VaeRubyd_ping_args {
 public:

  VaeRubyd_ping_args() {
  }

  virtual ~VaeRubyd_ping_args() throw() {}


  bool operator == (const VaeRubyd_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeRubyd_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_ping_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_ping_pargs {
 public:


  virtual ~VaeRubyd_ping_pargs() throw() {}


  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_ping_result {
 public:

  VaeRubyd_ping_result() : success(0) {
  }

  virtual ~VaeRubyd_ping_result() throw() {}

  int8_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const VaeRubyd_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_ping_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_ping_presult {
 public:


  virtual ~VaeRubyd_ping_presult() throw() {}

  int8_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class VaeRubyd_fixDocRoot_args {
 public:

  VaeRubyd_fixDocRoot_args() : path("") {
  }

  virtual ~VaeRubyd_fixDocRoot_args() throw() {}

  std::string path;

  struct __isset {
    __isset() : path(false) {}
    bool path;
  } __isset;

  bool operator == (const VaeRubyd_fixDocRoot_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_fixDocRoot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_fixDocRoot_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_fixDocRoot_pargs {
 public:


  virtual ~VaeRubyd_fixDocRoot_pargs() throw() {}

  const std::string* path;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_fixDocRoot_result {
 public:

  VaeRubyd_fixDocRoot_result() : success(0) {
  }

  virtual ~VaeRubyd_fixDocRoot_result() throw() {}

  int8_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const VaeRubyd_fixDocRoot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_fixDocRoot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_fixDocRoot_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_fixDocRoot_presult {
 public:


  virtual ~VaeRubyd_fixDocRoot_presult() throw() {}

  int8_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class VaeRubyd_haml_args {
 public:

  VaeRubyd_haml_args() : text("") {
  }

  virtual ~VaeRubyd_haml_args() throw() {}

  std::string text;

  struct __isset {
    __isset() : text(false) {}
    bool text;
  } __isset;

  bool operator == (const VaeRubyd_haml_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_haml_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_haml_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_haml_pargs {
 public:


  virtual ~VaeRubyd_haml_pargs() throw() {}

  const std::string* text;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_haml_result {
 public:

  VaeRubyd_haml_result() : success("") {
  }

  virtual ~VaeRubyd_haml_result() throw() {}

  std::string success;
  VaeSyntaxError se;

  struct __isset {
    __isset() : success(false), se(false) {}
    bool success;
    bool se;
  } __isset;

  bool operator == (const VaeRubyd_haml_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_haml_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_haml_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_haml_presult {
 public:


  virtual ~VaeRubyd_haml_presult() throw() {}

  std::string* success;
  VaeSyntaxError se;

  struct __isset {
    __isset() : success(false), se(false) {}
    bool success;
    bool se;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class VaeRubyd_sass_args {
 public:

  VaeRubyd_sass_args() : text(""), load_path("") {
  }

  virtual ~VaeRubyd_sass_args() throw() {}

  std::string text;
  std::string load_path;

  struct __isset {
    __isset() : text(false), load_path(false) {}
    bool text;
    bool load_path;
  } __isset;

  bool operator == (const VaeRubyd_sass_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(load_path == rhs.load_path))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_sass_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_sass_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_sass_pargs {
 public:


  virtual ~VaeRubyd_sass_pargs() throw() {}

  const std::string* text;
  const std::string* load_path;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_sass_result {
 public:

  VaeRubyd_sass_result() : success("") {
  }

  virtual ~VaeRubyd_sass_result() throw() {}

  std::string success;
  VaeSyntaxError se;

  struct __isset {
    __isset() : success(false), se(false) {}
    bool success;
    bool se;
  } __isset;

  bool operator == (const VaeRubyd_sass_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_sass_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_sass_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VaeRubyd_sass_presult {
 public:


  virtual ~VaeRubyd_sass_presult() throw() {}

  std::string* success;
  VaeSyntaxError se;

  struct __isset {
    __isset() : success(false), se(false) {}
    bool success;
    bool se;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class VaeRubydClient : virtual public VaeRubydIf {
 public:
  VaeRubydClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  VaeRubydClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int8_t ping();
  void send_ping();
  int8_t recv_ping();
  int8_t fixDocRoot(const std::string& path);
  void send_fixDocRoot(const std::string& path);
  int8_t recv_fixDocRoot();
  void haml(std::string& _return, const std::string& text);
  void send_haml(const std::string& text);
  void recv_haml(std::string& _return);
  void sass(std::string& _return, const std::string& text, const std::string& load_path);
  void send_sass(const std::string& text, const std::string& load_path);
  void recv_sass(std::string& _return);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class VaeRubydProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<VaeRubydIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (VaeRubydProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_ping(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_fixDocRoot(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_haml(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_sass(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  VaeRubydProcessor(boost::shared_ptr<VaeRubydIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &VaeRubydProcessor::process_ping;
    processMap_["fixDocRoot"] = &VaeRubydProcessor::process_fixDocRoot;
    processMap_["haml"] = &VaeRubydProcessor::process_haml;
    processMap_["sass"] = &VaeRubydProcessor::process_sass;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~VaeRubydProcessor() {}
};

class VaeRubydMultiface : virtual public VaeRubydIf {
 public:
  VaeRubydMultiface(std::vector<boost::shared_ptr<VaeRubydIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VaeRubydMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VaeRubydIf> > ifaces_;
  VaeRubydMultiface() {}
  void add(boost::shared_ptr<VaeRubydIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int8_t ping() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ping();
      } else {
        ifaces_[i]->ping();
      }
    }
  }

  int8_t fixDocRoot(const std::string& path) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->fixDocRoot(path);
      } else {
        ifaces_[i]->fixDocRoot(path);
      }
    }
  }

  void haml(std::string& _return, const std::string& text) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->haml(_return, text);
        return;
      } else {
        ifaces_[i]->haml(_return, text);
      }
    }
  }

  void sass(std::string& _return, const std::string& text, const std::string& load_path) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->sass(_return, text, load_path);
        return;
      } else {
        ifaces_[i]->sass(_return, text, load_path);
      }
    }
  }

};



#endif
