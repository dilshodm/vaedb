/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VaeRubyd_H
#define VaeRubyd_H

#include <thrift/TDispatchProcessor.h>
#include "vae_types.h"



class VaeRubydIf {
 public:
  virtual ~VaeRubydIf() {}
  virtual int8_t ping() = 0;
  virtual int8_t fixDocRoot(const std::string& path) = 0;
  virtual void haml(std::string& _return, const std::string& text) = 0;
  virtual void sass(std::string& _return, const std::string& text, const std::string& load_path, const std::string& style) = 0;
  virtual void scss(std::string& _return, const std::string& text, const std::string& load_path, const std::string& style) = 0;
};

class VaeRubydIfFactory {
 public:
  typedef VaeRubydIf Handler;

  virtual ~VaeRubydIfFactory() {}

  virtual VaeRubydIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VaeRubydIf* /* handler */) = 0;
};

class VaeRubydIfSingletonFactory : virtual public VaeRubydIfFactory {
 public:
  VaeRubydIfSingletonFactory(const boost::shared_ptr<VaeRubydIf>& iface) : iface_(iface) {}
  virtual ~VaeRubydIfSingletonFactory() {}

  virtual VaeRubydIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VaeRubydIf* /* handler */) {}

 protected:
  boost::shared_ptr<VaeRubydIf> iface_;
};

class VaeRubydNull : virtual public VaeRubydIf {
 public:
  virtual ~VaeRubydNull() {}
  int8_t ping() {
    int8_t _return = 0;
    return _return;
  }
  int8_t fixDocRoot(const std::string& /* path */) {
    int8_t _return = 0;
    return _return;
  }
  void haml(std::string& /* _return */, const std::string& /* text */) {
    return;
  }
  void sass(std::string& /* _return */, const std::string& /* text */, const std::string& /* load_path */, const std::string& /* style */) {
    return;
  }
  void scss(std::string& /* _return */, const std::string& /* text */, const std::string& /* load_path */, const std::string& /* style */) {
    return;
  }
};


class VaeRubyd_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  VaeRubyd_ping_args(const VaeRubyd_ping_args&);
  VaeRubyd_ping_args& operator=(const VaeRubyd_ping_args&);
  VaeRubyd_ping_args() {
  }

  virtual ~VaeRubyd_ping_args() throw();

  bool operator == (const VaeRubyd_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VaeRubyd_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_ping_args& obj);
};


class VaeRubyd_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~VaeRubyd_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_ping_pargs& obj);
};

typedef struct _VaeRubyd_ping_result__isset {
  _VaeRubyd_ping_result__isset() : success(false) {}
  bool success :1;
} _VaeRubyd_ping_result__isset;

class VaeRubyd_ping_result {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};

  VaeRubyd_ping_result(const VaeRubyd_ping_result&);
  VaeRubyd_ping_result& operator=(const VaeRubyd_ping_result&);
  VaeRubyd_ping_result() : success(0) {
  }

  virtual ~VaeRubyd_ping_result() throw();
  int8_t success;

  _VaeRubyd_ping_result__isset __isset;

  void __set_success(const int8_t val);

  bool operator == (const VaeRubyd_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_ping_result& obj);
};

typedef struct _VaeRubyd_ping_presult__isset {
  _VaeRubyd_ping_presult__isset() : success(false) {}
  bool success :1;
} _VaeRubyd_ping_presult__isset;

class VaeRubyd_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};


  virtual ~VaeRubyd_ping_presult() throw();
  int8_t* success;

  _VaeRubyd_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_ping_presult& obj);
};

typedef struct _VaeRubyd_fixDocRoot_args__isset {
  _VaeRubyd_fixDocRoot_args__isset() : path(false) {}
  bool path :1;
} _VaeRubyd_fixDocRoot_args__isset;

class VaeRubyd_fixDocRoot_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeRubyd_fixDocRoot_args(const VaeRubyd_fixDocRoot_args&);
  VaeRubyd_fixDocRoot_args& operator=(const VaeRubyd_fixDocRoot_args&);
  VaeRubyd_fixDocRoot_args() : path() {
  }

  virtual ~VaeRubyd_fixDocRoot_args() throw();
  std::string path;

  _VaeRubyd_fixDocRoot_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const VaeRubyd_fixDocRoot_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_fixDocRoot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_fixDocRoot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_fixDocRoot_args& obj);
};


class VaeRubyd_fixDocRoot_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~VaeRubyd_fixDocRoot_pargs() throw();
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_fixDocRoot_pargs& obj);
};

typedef struct _VaeRubyd_fixDocRoot_result__isset {
  _VaeRubyd_fixDocRoot_result__isset() : success(false) {}
  bool success :1;
} _VaeRubyd_fixDocRoot_result__isset;

class VaeRubyd_fixDocRoot_result {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};

  VaeRubyd_fixDocRoot_result(const VaeRubyd_fixDocRoot_result&);
  VaeRubyd_fixDocRoot_result& operator=(const VaeRubyd_fixDocRoot_result&);
  VaeRubyd_fixDocRoot_result() : success(0) {
  }

  virtual ~VaeRubyd_fixDocRoot_result() throw();
  int8_t success;

  _VaeRubyd_fixDocRoot_result__isset __isset;

  void __set_success(const int8_t val);

  bool operator == (const VaeRubyd_fixDocRoot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_fixDocRoot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_fixDocRoot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_fixDocRoot_result& obj);
};

typedef struct _VaeRubyd_fixDocRoot_presult__isset {
  _VaeRubyd_fixDocRoot_presult__isset() : success(false) {}
  bool success :1;
} _VaeRubyd_fixDocRoot_presult__isset;

class VaeRubyd_fixDocRoot_presult {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};


  virtual ~VaeRubyd_fixDocRoot_presult() throw();
  int8_t* success;

  _VaeRubyd_fixDocRoot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_fixDocRoot_presult& obj);
};

typedef struct _VaeRubyd_haml_args__isset {
  _VaeRubyd_haml_args__isset() : text(false) {}
  bool text :1;
} _VaeRubyd_haml_args__isset;

class VaeRubyd_haml_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VaeRubyd_haml_args(const VaeRubyd_haml_args&);
  VaeRubyd_haml_args& operator=(const VaeRubyd_haml_args&);
  VaeRubyd_haml_args() : text() {
  }

  virtual ~VaeRubyd_haml_args() throw();
  std::string text;

  _VaeRubyd_haml_args__isset __isset;

  void __set_text(const std::string& val);

  bool operator == (const VaeRubyd_haml_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_haml_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_haml_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_haml_args& obj);
};


class VaeRubyd_haml_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~VaeRubyd_haml_pargs() throw();
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_haml_pargs& obj);
};

typedef struct _VaeRubyd_haml_result__isset {
  _VaeRubyd_haml_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _VaeRubyd_haml_result__isset;

class VaeRubyd_haml_result {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};

  VaeRubyd_haml_result(const VaeRubyd_haml_result&);
  VaeRubyd_haml_result& operator=(const VaeRubyd_haml_result&);
  VaeRubyd_haml_result() : success() {
  }

  virtual ~VaeRubyd_haml_result() throw();
  std::string success;
  VaeSyntaxError se;

  _VaeRubyd_haml_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const VaeSyntaxError& val);

  bool operator == (const VaeRubyd_haml_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_haml_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_haml_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_haml_result& obj);
};

typedef struct _VaeRubyd_haml_presult__isset {
  _VaeRubyd_haml_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _VaeRubyd_haml_presult__isset;

class VaeRubyd_haml_presult {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};


  virtual ~VaeRubyd_haml_presult() throw();
  std::string* success;
  VaeSyntaxError se;

  _VaeRubyd_haml_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_haml_presult& obj);
};

typedef struct _VaeRubyd_sass_args__isset {
  _VaeRubyd_sass_args__isset() : text(false), load_path(false), style(false) {}
  bool text :1;
  bool load_path :1;
  bool style :1;
} _VaeRubyd_sass_args__isset;

class VaeRubyd_sass_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  VaeRubyd_sass_args(const VaeRubyd_sass_args&);
  VaeRubyd_sass_args& operator=(const VaeRubyd_sass_args&);
  VaeRubyd_sass_args() : text(), load_path(), style() {
  }

  virtual ~VaeRubyd_sass_args() throw();
  std::string text;
  std::string load_path;
  std::string style;

  _VaeRubyd_sass_args__isset __isset;

  void __set_text(const std::string& val);

  void __set_load_path(const std::string& val);

  void __set_style(const std::string& val);

  bool operator == (const VaeRubyd_sass_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(load_path == rhs.load_path))
      return false;
    if (!(style == rhs.style))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_sass_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_sass_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_sass_args& obj);
};


class VaeRubyd_sass_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~VaeRubyd_sass_pargs() throw();
  const std::string* text;
  const std::string* load_path;
  const std::string* style;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_sass_pargs& obj);
};

typedef struct _VaeRubyd_sass_result__isset {
  _VaeRubyd_sass_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _VaeRubyd_sass_result__isset;

class VaeRubyd_sass_result {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};

  VaeRubyd_sass_result(const VaeRubyd_sass_result&);
  VaeRubyd_sass_result& operator=(const VaeRubyd_sass_result&);
  VaeRubyd_sass_result() : success() {
  }

  virtual ~VaeRubyd_sass_result() throw();
  std::string success;
  VaeSyntaxError se;

  _VaeRubyd_sass_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const VaeSyntaxError& val);

  bool operator == (const VaeRubyd_sass_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_sass_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_sass_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_sass_result& obj);
};

typedef struct _VaeRubyd_sass_presult__isset {
  _VaeRubyd_sass_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _VaeRubyd_sass_presult__isset;

class VaeRubyd_sass_presult {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};


  virtual ~VaeRubyd_sass_presult() throw();
  std::string* success;
  VaeSyntaxError se;

  _VaeRubyd_sass_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_sass_presult& obj);
};

typedef struct _VaeRubyd_scss_args__isset {
  _VaeRubyd_scss_args__isset() : text(false), load_path(false), style(false) {}
  bool text :1;
  bool load_path :1;
  bool style :1;
} _VaeRubyd_scss_args__isset;

class VaeRubyd_scss_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  VaeRubyd_scss_args(const VaeRubyd_scss_args&);
  VaeRubyd_scss_args& operator=(const VaeRubyd_scss_args&);
  VaeRubyd_scss_args() : text(), load_path(), style() {
  }

  virtual ~VaeRubyd_scss_args() throw();
  std::string text;
  std::string load_path;
  std::string style;

  _VaeRubyd_scss_args__isset __isset;

  void __set_text(const std::string& val);

  void __set_load_path(const std::string& val);

  void __set_style(const std::string& val);

  bool operator == (const VaeRubyd_scss_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(load_path == rhs.load_path))
      return false;
    if (!(style == rhs.style))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_scss_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_scss_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_scss_args& obj);
};


class VaeRubyd_scss_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~VaeRubyd_scss_pargs() throw();
  const std::string* text;
  const std::string* load_path;
  const std::string* style;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_scss_pargs& obj);
};

typedef struct _VaeRubyd_scss_result__isset {
  _VaeRubyd_scss_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _VaeRubyd_scss_result__isset;

class VaeRubyd_scss_result {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};

  VaeRubyd_scss_result(const VaeRubyd_scss_result&);
  VaeRubyd_scss_result& operator=(const VaeRubyd_scss_result&);
  VaeRubyd_scss_result() : success() {
  }

  virtual ~VaeRubyd_scss_result() throw();
  std::string success;
  VaeSyntaxError se;

  _VaeRubyd_scss_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const VaeSyntaxError& val);

  bool operator == (const VaeRubyd_scss_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const VaeRubyd_scss_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VaeRubyd_scss_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_scss_result& obj);
};

typedef struct _VaeRubyd_scss_presult__isset {
  _VaeRubyd_scss_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _VaeRubyd_scss_presult__isset;

class VaeRubyd_scss_presult {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};


  virtual ~VaeRubyd_scss_presult() throw();
  std::string* success;
  VaeSyntaxError se;

  _VaeRubyd_scss_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const VaeRubyd_scss_presult& obj);
};

class VaeRubydClient : virtual public VaeRubydIf {
 public:
  VaeRubydClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VaeRubydClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int8_t ping();
  void send_ping();
  int8_t recv_ping();
  int8_t fixDocRoot(const std::string& path);
  void send_fixDocRoot(const std::string& path);
  int8_t recv_fixDocRoot();
  void haml(std::string& _return, const std::string& text);
  void send_haml(const std::string& text);
  void recv_haml(std::string& _return);
  void sass(std::string& _return, const std::string& text, const std::string& load_path, const std::string& style);
  void send_sass(const std::string& text, const std::string& load_path, const std::string& style);
  void recv_sass(std::string& _return);
  void scss(std::string& _return, const std::string& text, const std::string& load_path, const std::string& style);
  void send_scss(const std::string& text, const std::string& load_path, const std::string& style);
  void recv_scss(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VaeRubydProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VaeRubydIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VaeRubydProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fixDocRoot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_haml(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sass(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VaeRubydProcessor(boost::shared_ptr<VaeRubydIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &VaeRubydProcessor::process_ping;
    processMap_["fixDocRoot"] = &VaeRubydProcessor::process_fixDocRoot;
    processMap_["haml"] = &VaeRubydProcessor::process_haml;
    processMap_["sass"] = &VaeRubydProcessor::process_sass;
    processMap_["scss"] = &VaeRubydProcessor::process_scss;
  }

  virtual ~VaeRubydProcessor() {}
};

class VaeRubydProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VaeRubydProcessorFactory(const ::boost::shared_ptr< VaeRubydIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VaeRubydIfFactory > handlerFactory_;
};

class VaeRubydMultiface : virtual public VaeRubydIf {
 public:
  VaeRubydMultiface(std::vector<boost::shared_ptr<VaeRubydIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VaeRubydMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VaeRubydIf> > ifaces_;
  VaeRubydMultiface() {}
  void add(boost::shared_ptr<VaeRubydIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int8_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  int8_t fixDocRoot(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fixDocRoot(path);
    }
    return ifaces_[i]->fixDocRoot(path);
  }

  void haml(std::string& _return, const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->haml(_return, text);
    }
    ifaces_[i]->haml(_return, text);
    return;
  }

  void sass(std::string& _return, const std::string& text, const std::string& load_path, const std::string& style) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sass(_return, text, load_path, style);
    }
    ifaces_[i]->sass(_return, text, load_path, style);
    return;
  }

  void scss(std::string& _return, const std::string& text, const std::string& load_path, const std::string& style) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scss(_return, text, load_path, style);
    }
    ifaces_[i]->scss(_return, text, load_path, style);
    return;
  }

};



#endif
